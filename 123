import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.node.JsonNodeType;

import java.io.IOException;

public class GenericDelegatingDeserializer<T>
        extends StdDeserializer<T>
        implements ContextualDeserializer {

    private final JsonDeserializer<Object> delegate;
    private final JavaType type;

    public GenericDelegatingDeserializer(JavaType type) {
        super(type);
        this.type = type;
        this.delegate = null;
    }

    private GenericDelegatingDeserializer(JavaType type, JsonDeserializer<?> delegate) {
        super(type);
        this.type = type;
        this.delegate = (JsonDeserializer<Object>) delegate;
    }

    @Override
    @SuppressWarnings("unchecked")
    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        JsonNode node = p.getCodec().readTree(p);

        // Case 1: plain text <Pojo>*</Pojo>
        if (node.getNodeType() == JsonNodeType.STRING || node.isTextual()) {
            // just ignore it → return empty POJO
            return (T) ctxt.findRootValueDeserializer(type)
                           .getEmptyValue(ctxt);
        }

        // Case 2: normal structured XML → delegate
        if (delegate != null) {
            return (T) delegate.deserialize(p, ctxt);
        }

        return null;
    }

    @Override
    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
            throws JsonMappingException {
        JsonDeserializer<Object> deser = ctxt.findNonContextualValueDeserializer(type);
        return new GenericDelegatingDeserializer<>(type, deser);
    }
}