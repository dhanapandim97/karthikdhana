@Test
void testIsCocRopcQuote_trueCase() {
    // Applicant info
    AddCreditProtectionQuotationRqQuotationApplicantInner applicant = new AddCreditProtectionQuotationRqQuotationApplicantInner();
    AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual individual = new AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual();
    individual.setAgeNum(50); // age > maximumAge and < maximumAttainAge
    applicant.setIndividual(individual);
    // Existing coverage items (non-empty)
    applicant.setExistingCoverageItem(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInnerQuotationItemInner()));

    // Plan details
    CpPlanMasterDetail planDetail = new CpPlanMasterDetail();
    planDetail.setMaximumAge(45); // age > maximumAge
    planDetail.setMaximumAttainAge(55); // age < maximumAttainAge

    // Product type that satisfies condition
    String productTypecd = CreditProtectionConstants.PRODUCT_TYPE_CD_MTG;

    boolean result = mortgageCreditProtectionQuotationServiceMock.isCocRopcQuote(applicant, planDetail, productTypecd);
    assertTrue(result, "Method should return true when all conditions are met");
}

@Test
void testIsCocRopcQuote_false_productType() {
    // Applicant info
    AddCreditProtectionQuotationRqQuotationApplicantInner applicant = new AddCreditProtectionQuotationRqQuotationApplicantInner();
    AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual individual = new AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual();
    individual.setAgeNum(50);
    applicant.setIndividual(individual);
    applicant.setExistingCoverageItem(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInnerQuotationItemInner()));

    // Plan details
    CpPlanMasterDetail planDetail = new CpPlanMasterDetail();
    planDetail.setMaximumAge(45);
    planDetail.setMaximumAttainAge(55);

    // Product type that fails condition
    String productTypecd = "OTHER";

    boolean result = mortgageCreditProtectionQuotationServiceMock.isCocRopcQuote(applicant, planDetail, productTypecd);
    assertFalse(result, "Method should return false if product type does not match");
}

@Test
void testIsCocRopcQuote_false_noExistingCoverage() {
    AddCreditProtectionQuotationRqQuotationApplicantInner applicant = new AddCreditProtectionQuotationRqQuotationApplicantInner();
    AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual individual = new AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual();
    individual.setAgeNum(50);
    applicant.setIndividual(individual);
    applicant.setExistingCoverageItem(null); // null list

    CpPlanMasterDetail planDetail = new CpPlanMasterDetail();
    planDetail.setMaximumAge(45);
    planDetail.setMaximumAttainAge(55);

    String productTypecd = CreditProtectionConstants.PRODUCT_TYPE_CD_MTG;

    boolean result = mortgageCreditProtectionQuotationServiceMock.isCocRopcQuote(applicant, planDetail, productTypecd);
    assertFalse(result, "Method should return false if existing coverage item is null");
}

@Test
void testIsCocRopcQuote_false_ageBelowMaximumAge() {
    AddCreditProtectionQuotationRqQuotationApplicantInner applicant = new AddCreditProtectionQuotationRqQuotationApplicantInner();
    AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual individual = new AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual();
    individual.setAgeNum(40); // age <= maximumAge
    applicant.setIndividual(individual);
    applicant.setExistingCoverageItem(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInnerQuotationItemInner()));

    CpPlanMasterDetail planDetail = new CpPlanMasterDetail();
    planDetail.setMaximumAge(45);
    planDetail.setMaximumAttainAge(55);

    String productTypecd = CreditProtectionConstants.PRODUCT_TYPE_CD_MTG;

    boolean result = mortgageCreditProtectionQuotationServiceMock.isCocRopcQuote(applicant, planDetail, productTypecd);
    assertFalse(result, "Method should return false if age <= maximumAge");
}

@Test
void testIsCocRopcQuote_false_ageAboveMaximumAttainAge() {
    AddCreditProtectionQuotationRqQuotationApplicantInner applicant = new AddCreditProtectionQuotationRqQuotationApplicantInner();
    AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual individual = new AddCreditProtectionQuotationRqQuotationApplicantInnerIndividual();
    individual.setAgeNum(60); // age > maximumAttainAge
    applicant.setIndividual(individual);
    applicant.setExistingCoverageItem(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInnerQuotationItemInner()));

    CpPlanMasterDetail planDetail = new CpPlanMasterDetail();
    planDetail.setMaximumAge(45);
    planDetail.setMaximumAttainAge(55);

    String productTypecd = CreditProtectionConstants.PRODUCT_TYPE_CD_MTG;

    boolean result = mortgageCreditProtectionQuotationServiceMock.isCocRopcQuote(applicant, planDetail, productTypecd);
    assertFalse(result, "Method should return false if age >= maximumAttainAge");
}