@Test
void testSearchPartyLookupBusinessAggregationOperation_customerService_success() throws Exception {
    // given
    SearchPartyLookupBusinessAggregationRequestPayload payload = new SearchPartyLookupBusinessAggregationRequestPayload();

    HttpResponse resp = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(200);
    when(resp.getStatusLine()).thenReturn(statusLine);
    when(resp.getEntity()).thenReturn(new StringEntity("{\"ok\":\"yes\"}", StandardCharsets.UTF_8));

    when(apiExecutor.makeGETRequest(contains("customerService"), any())).thenAnswer(inv -> {
        Function<HttpResponse, String> fn = inv.getArgument(1);
        return fn.apply(resp);
    });

    SearchPartyLookupBusinessAggregationResponse expected = new SearchPartyLookupBusinessAggregationResponse();
    when(objectMapper.readValue(anyString(), eq(SearchPartyLookupBusinessAggregationResponse.class)))
            .thenReturn(expected);

    // when
    SearchPartyLookupBusinessAggregationResponse actual =
            partyLookupService.searchPartyLookupBusinessAggregationOperation(payload);

    // then
    assertSame(expected, actual);
}

@Test
void testSearchPartyLookupBusinessAggregationOperation_alternateService_success() throws Exception {
    // given
    SearchPartyLookupBusinessAggregationRequestPayload payload = new SearchPartyLookupBusinessAggregationRequestPayload();

    HttpResponse resp = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(200);
    when(resp.getStatusLine()).thenReturn(statusLine);
    when(resp.getEntity()).thenReturn(new StringEntity("{\"alt\":\"yes\"}", StandardCharsets.UTF_8));

    when(apiExecutor.makeGETRequest(contains("alternateService"), any())).thenAnswer(inv -> {
        Function<HttpResponse, String> fn = inv.getArgument(1);
        return fn.apply(resp);
    });

    SearchPartyLookupBusinessAggregationResponse expected = new SearchPartyLookupBusinessAggregationResponse();
    when(objectMapper.readValue(anyString(), eq(SearchPartyLookupBusinessAggregationResponse.class)))
            .thenReturn(expected);

    // when
    SearchPartyLookupBusinessAggregationResponse actual =
            partyLookupService.searchPartyLookupBusinessAggregationOperation(payload);

    // then
    assertSame(expected, actual);
}

@Test
void testSearchPartyLookupBusinessAggregationOperation_customerService_jsonProcessingException() throws Exception {
    // given
    SearchPartyLookupBusinessAggregationRequestPayload payload = new SearchPartyLookupBusinessAggregationRequestPayload();

    HttpResponse resp = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(200);
    when(resp.getStatusLine()).thenReturn(statusLine);
    when(resp.getEntity()).thenReturn(new StringEntity("{\"bad\":\"json\"}", StandardCharsets.UTF_8));

    when(apiExecutor.makeGETRequest(contains("customerService"), any())).thenAnswer(inv -> {
        Function<HttpResponse, String> fn = inv.getArgument(1);
        return fn.apply(resp);
    });

    when(objectMapper.readValue(anyString(), eq(SearchPartyLookupBusinessAggregationResponse.class)))
            .thenThrow(new JsonProcessingException("boom"){});

    // when / then
    assertThrows(RuntimeException.class,
            () -> partyLookupService.searchPartyLookupBusinessAggregationOperation(payload));
}

@Test
void testSearchPartyLookupBusinessAggregationOperation_alternateService_statusNot200() throws Exception {
    // given
    SearchPartyLookupBusinessAggregationRequestPayload payload = new SearchPartyLookupBusinessAggregationRequestPayload();

    HttpResponse resp = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(500);
    when(resp.getStatusLine()).thenReturn(statusLine);
    when(resp.getEntity()).thenReturn(new StringEntity("{\"error\":\"server\"}", StandardCharsets.UTF_8));

    when(apiExecutor.makeGETRequest(contains("alternateService"), any())).thenAnswer(inv -> {
        Function<HttpResponse, String> fn = inv.getArgument(1);
        return fn.apply(resp);
    });

    // when / then
    assertThrows(RuntimeException.class,
            () -> partyLookupService.searchPartyLookupBusinessAggregationOperation(payload));
}