@Test
public void testMortgagePopulateStatusCodeBranches_CoverLine() {
    // True branch: statusCode = 123
    AddError addErrorTrue = mock(AddError.class);
    when(addErrorTrue.getAddServerStatusCode()).thenReturn("S3");
    when(addErrorTrue.getAddSeverity()).thenReturn("HIGH");
    when(addErrorTrue.getStatusCode()).thenReturn(123); // >0 && != MIN_VALUE
    when(addErrorTrue.getStatusDesc()).thenReturn("desc");

    ApiErrorHandler handlerMock = mock(ApiErrorHandler.class);
    when(handlerMock.getAdditionalErrors(anyString())).thenReturn(Arrays.asList(addErrorTrue));

    try (MockedStatic<ApiErrorHandler> mocked = Mockito.mockStatic(ApiErrorHandler.class)) {
        mocked.when(ApiErrorHandler::getInstance).thenReturn(handlerMock);

        try (MockedStatic<ValidatorUtil> validatorMock = Mockito.mockStatic(ValidatorUtil.class)) {
            validatorMock.when(() -> ValidatorUtil.getParamedMsgText(anyString(), anyList()))
                         .thenReturn("processedDesc");

            // Execute method
            var list = exception.populateMortgageQuotationadditionalstatus("ID");
            var status = list.get(0);
            assertEquals(123, status.getStatusCode(), "True branch: statusCode should be set");
        }
    }

    // False branch: statusCode = 0
    AddError addErrorFalse = mock(AddError.class);
    when(addErrorFalse.getAddServerStatusCode()).thenReturn("S3");
    when(addErrorFalse.getAddSeverity()).thenReturn("HIGH");
    when(addErrorFalse.getStatusCode()).thenReturn(0); // triggers false branch
    when(addErrorFalse.getStatusDesc()).thenReturn("desc");

    when(handlerMock.getAdditionalErrors(anyString())).thenReturn(Arrays.asList(addErrorFalse));

    try (MockedStatic<ApiErrorHandler> mocked = Mockito.mockStatic(ApiErrorHandler.class)) {
        mocked.when(ApiErrorHandler::getInstance).thenReturn(handlerMock);

        try (MockedStatic<ValidatorUtil> validatorMock = Mockito.mockStatic(ValidatorUtil.class)) {
            validatorMock.when(() -> ValidatorUtil.getParamedMsgText(anyString(), anyList()))
                         .thenReturn("processedDesc");

            var list = exception.populateMortgageQuotationadditionalstatus("ID");
            var status = list.get(0);
            assertEquals(0, status.getStatusCode(), "False branch: statusCode should remain 0");
        }
    }
}