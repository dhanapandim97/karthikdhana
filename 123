@Test
void testGetIINumber_LowerEnv_Normal_Fixed() throws Exception {
    CIFApiClient spyClient = spy(cifApiClient);

    // Mock environment
    Environment mockEnv = mock(Environment.class);
    ReflectionTestUtils.setField(spyClient, "environment", mockEnv);
    when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
    when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);

    when(reqHeaders.getHeaderValue(anyString())).thenReturn(null);

    // Mock HttpClient and OAuthClient
    CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);
    OAuthClient mockOAuthClient = mock(OAuthClient.class);
    try (MockedStatic<OAuthClient> oauthStatic = mockStatic(OAuthClient.class)) {
        oauthStatic.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
        doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

        // Return the JSON string directly from execute
        when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
            .thenAnswer(invocation -> {
                ResponseHandler<String> handler = invocation.getArgument(1);
                // Directly pass the JSON string expected by ObjectMapper
                String json = "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}";
                return handler.handleResponse(mockResponseWithJson(json));
            });

        // Call method
        String iiNumber = spyClient.getIINumber(reqHeaders, "12345", "jwt");

        // Assert correct II number
        assertEquals("123", iiNumber);
    }
}

// Helper to return a mock HttpResponse with Entity containing JSON
private HttpResponse mockResponseWithJson(String json) throws IOException {
    HttpResponse response = mock(HttpResponse.class);
    HttpEntity entity = mock(HttpEntity.class);
    when(response.getEntity()).thenReturn(entity);
    when(entity.getContent()).thenReturn(new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)));
    StatusLine statusLine = mock(StatusLine.class);
    when(statusLine.getStatusCode()).thenReturn(200);
    when(response.getStatusLine()).thenReturn(statusLine);
    return response;
}