import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class LoggingAspectTest {

    private LoggingAspect loggingAspect;

    @Mock
    private ProceedingJoinPoint joinPoint;

    @Mock
    private Signature signature;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        loggingAspect = new LoggingAspect();
        loggingAspect.threshold = 50; // default threshold
    }

    @Test
    void testUserAdvice() throws Throwable {
        when(joinPoint.getSignature()).thenReturn(signature);
        when(signature.toString()).thenReturn("mockSignature");
        when(joinPoint.proceed()).thenReturn("mockReturn");

        Object result = loggingAspect.userAdvice(joinPoint);

        assertEquals("mockReturn", result);
        verify(joinPoint, times(1)).proceed();
    }

    @Test
    void testLogMethodExecution_BelowThreshold() throws Throwable {
        when(joinPoint.getSignature()).thenReturn(signature);
        when(signature.getName()).thenReturn("mockMethod");
        when(joinPoint.getTarget()).thenReturn(new CreditProtectionQuoteController()); // your controller
        when(joinPoint.proceed()).thenReturn("mockResult");

        Object result = loggingAspect.logMethodExecution(joinPoint);

        assertEquals("mockResult", result);
        verify(joinPoint, times(1)).proceed();
    }

    @Test
    void testLogMethodExecution_AboveThreshold() throws Throwable {
        loggingAspect.threshold = -1; // force "above threshold" branch

        when(joinPoint.getSignature()).thenReturn(signature);
        when(signature.getName()).thenReturn("slowMethod");
        when(joinPoint.getTarget()).thenReturn(new CreditProtectionQuoteController()); // your controller
        when(joinPoint.proceed()).thenAnswer(invocation -> {
            Thread.sleep(5); // simulate slow method
            return "slowResult";
        });

        Object result = loggingAspect.logMethodExecution(joinPoint);

        assertEquals("slowResult", result);
        verify(joinPoint, times(1)).proceed();
    }
}