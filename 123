@Test
void testGetIINumber_LowerEnv_Normal() throws Exception {
    Environment mockEnv = mock(Environment.class);
    ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

    when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
    when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);
    when(reqHeaders.getHeaderValue(anyString())).thenReturn("headerId");

    CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);

    // Mock HttpResponse, StatusLine, HttpEntity
    HttpResponse mockResponse = mock(HttpResponse.class);
    StatusLine mockStatusLine = mock(StatusLine.class);
    HttpEntity mockEntity = mock(HttpEntity.class);

    when(mockStatusLine.getStatusCode()).thenReturn(200);
    when(mockResponse.getStatusLine()).thenReturn(mockStatusLine);

    // **EntityUtils.toString will return JSON**
    String json = "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}";
    when(mockResponse.getEntity()).thenReturn(mockEntity);
    when(mockEntity.getContentLength()).thenReturn((long) json.length());
    when(mockEntity.isRepeatable()).thenReturn(true);

    // Mock EntityUtils.toString() using static mocking
    try (MockedStatic<org.apache.http.util.EntityUtils> mockedEntityUtils = mockStatic(org.apache.http.util.EntityUtils.class)) {
        mockedEntityUtils.when(() -> org.apache.http.util.EntityUtils.toString(mockEntity))
                .thenReturn(json);

        // Mock OAuthClient
        try (MockedStatic<OAuthClient> mockedOAuth = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mockedOAuth.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // **Return response from ResponseHandler**
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<String> handler = invocation.getArgument(1);
                        return handler.handleResponse(mockResponse);
                    });

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals("123", iiNumber); // âœ… now matches JSON
        }
    }
}