import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class QuotationServiceTest {

    private QuotationService service; // class that has getMonthlyPmtAmt()
    private QuotationUpdate quotationUpdate;
    private Quotation quotation;

    @BeforeEach
    void setUp() {
        service = new QuotationService();
        quotationUpdate = mock(QuotationUpdate.class);
        quotation = mock(Quotation.class);

        // inject mocks (if fields are package-private/public)
        service.quotationUpdate = quotationUpdate;
        service.quotation = quotation;
    }

    @Test
    void testCredAppHasMonthlyPayment() {
        PartialUpdateCreditProtectionQuotationMortgageProductRqQuotationCreditApplication credApp =
                mock(PartialUpdateCreditProtectionQuotationMortgageProductRqQuotationCreditApplication.class);

        when(quotationUpdate.getCreditApplication()).thenReturn(credApp);
        when(credApp.getMonthlyPaymentAmt()).thenReturn(BigDecimal.valueOf(123.456));

        BigDecimal result = service.getMonthlyPmtAmt();

        assertEquals(new BigDecimal("123.46"), result); // formatted with 2 decimals
    }

    @Test
    void testCredAppNullButQuotationHasMonthlyPayment() {
        when(quotationUpdate.getCreditApplication()).thenReturn(null);
        when(quotation.getMonthlyPaymentAmt()).thenReturn(BigDecimal.valueOf(789.12));

        BigDecimal result = service.getMonthlyPmtAmt();

        assertEquals(new BigDecimal("789.12"), result); // returns directly
    }

    @Test
    void testBothCredAppAndQuotationNull() {
        when(quotationUpdate.getCreditApplication()).thenReturn(null);
        when(quotation.getMonthlyPaymentAmt()).thenReturn(null);

        BigDecimal result = service.getMonthlyPmtAmt();

        assertEquals(new BigDecimal("0.00"), result); // fallback case
    }
}