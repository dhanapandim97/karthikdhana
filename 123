@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class CreditProtectionQuoteControllerV1Tests {

    private CreditProtectionQuoteController controller;
    private CreditProtectionQuotationFactory cpFac;
    private CreditProtectionRequestValidatorUtil cpUtil;
    private AddCreditProtectionQuotationRq apiQuoteReq;

    private MockedStatic<ApiErrorHandler> mockedHandler;
    private ApiErrorHandler mockHandlerInstance;

    @BeforeAll
    public void setupStaticMock() {
        mockedHandler = Mockito.mockStatic(ApiErrorHandler.class);
        mockHandlerInstance = mock(ApiErrorHandler.class);
        mockedHandler.when(ApiErrorHandler::getInstance).thenReturn(mockHandlerInstance);
    }

    @AfterAll
    public void tearDownStaticMock() {
        mockedHandler.close();
    }

    @BeforeEach
    public void setup() {
        controller = new CreditProtectionQuoteController();
        cpFac = mock(CreditProtectionQuotationFactory.class);
        cpUtil = mock(CreditProtectionRequestValidatorUtil.class);
        controller.creditProtectionQuotationFactory = cpFac;
        controller.creditProtectionRequestValidatorUtil = cpUtil;

        apiQuoteReq = new AddCreditProtectionQuotationRq();
        AddCreditProtectionQuotationRqQuotation quotation = new AddCreditProtectionQuotationRqQuotation();
        quotation.setCreditApplication(new AddCreditProtectionQuotationRqQuotationCreditApplication());
        apiQuoteReq.setQuotation(quotation);
    }

    @AfterEach
    public void tearDown() {
        controller = null;
        cpFac = null;
        cpUtil = null;
        apiQuoteReq = null;
    }

    @Test
    public void testGetCpQuoteApiExceptionBranch() throws Exception {
        // Mock AddError to avoid NPE
        AddError addError = mock(AddError.class);
        when(addError.getAddServerStatusCode()).thenReturn("500");
        when(addError.getStatusCode()).thenReturn(500);
        when(addError.getStatusDesc()).thenReturn("Test error");

        // Mock Error object returned by ApiErrorHandler
        com.td.tdi.cp.api.cpqte.model.errorhandling.Error error = mock(
                com.td.tdi.cp.api.cpqte.model.errorhandling.Error.class);
        when(error.getServerStatusCode()).thenReturn("500");
        when(error.getId()).thenReturn("TEST_ID");

        // Mock ApiErrorHandler methods
        when(mockHandlerInstance.getAdditionalErrors(anyString())).thenReturn(List.of(addError));
        when(mockHandlerInstance.getServerStatusCode(anyString())).thenReturn("500");
        when(mockHandlerInstance.getSeverity(anyString())).thenReturn("CRITICAL");
        when(mockHandlerInstance.getErrorInstanceFromErrorCode(anyString())).thenReturn(error);

        // Create ApiException
        ErrorConfig mockErrorConfig = mock(ErrorConfig.class);
        when(mockErrorConfig.getId()).thenReturn("TEST_ID");
        ApiException apiEx = new ApiException(mockErrorConfig);

        // Mock factory to throw ApiException
        when(cpFac.getCreditProtectionQuotation(any(), any())).thenThrow(apiEx);

        // Call controller
        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        // Assertions
        assertThat(response).isNotNull();
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(response.getBody().getStatus()).isNotNull();
        assertThat(response.getBody().getStatus().getServerStatusCode()).isEqualTo("500");
        assertThat(response.getBody().getStatus().getAdditionalStatus()).isNotEmpty();
    }

    @Test
    public void testGetCpQuoteSuccess() throws Exception {
        // Mock factory to return a normal quotation
        AddCreditProtectionQuotationRsQuotation quotationRs = mock(AddCreditProtectionQuotationRsQuotation.class);
        when(cpFac.getCreditProtectionQuotation(any(), any())).thenReturn(quotationRs);

        // Call controller
        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        // Assertions
        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getStatus()).isNull(); // No error
    }
}