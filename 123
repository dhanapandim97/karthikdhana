import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.td.tdi.cp.api.cpqte.controller.CreditProtectionQuoteController;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationRq;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationRqQuotation;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationRqQuotationApplicantInner;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationRqQuotationCreditApplication;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationV2RsQuotation;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationWarningRs;
import com.td.tdi.cp.api.cpqte.service.CreditProtectionQuotationFactory;

public class CreditProtectionQuoteControllerTests {

    @InjectMocks
    private CreditProtectionQuoteController controller;

    @Mock
    private CreditProtectionQuotationFactory cpFac;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetCpQuoteWithAllPremium_SingleCustomerBranch() throws Exception {
        AddCreditProtectionQuotationRq request = new AddCreditProtectionQuotationRq();
        AddCreditProtectionQuotationRqQuotation infoRq = new AddCreditProtectionQuotationRqQuotation();
        infoRq.setApplicant(new ArrayList<>(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInner())));
        infoRq.setCreditApplication(new AddCreditProtectionQuotationRqQuotationCreditApplication());
        request.setQuotation(infoRq);

        AddCreditProtectionQuotationV2RsQuotation quotation = new AddCreditProtectionQuotationV2RsQuotation();
        quotation.setApplicant(new ArrayList<>(List.of(new AddCreditProtectionQuotationV2RsQuotationApplicantInner())));

        when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenReturn(quotation);

        ResponseEntity<AddCreditProtectionQuotationWarningRs> response =
                controller.getCpQuoteWithAllPremium("en", "Bearer token", request);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getQuotation()).isNotNull();
        assertThat(response.getBody().getQuotation().getApplicant().size()).isEqualTo(1);
    }

    @Test
    void testGetCpQuoteWithAllPremium_MultiCustomerBranch() throws Exception {
        AddCreditProtectionQuotationRq request = new AddCreditProtectionQuotationRq();
        AddCreditProtectionQuotationRqQuotation infoRq = new AddCreditProtectionQuotationRqQuotation();
        infoRq.setApplicant(new ArrayList<>(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInner())));
        infoRq.setMultiCustomerIndicator(true);
        infoRq.setCreditApplication(new AddCreditProtectionQuotationRqQuotationCreditApplication());
        request.setQuotation(infoRq);

        when(cpFac.buildRequestBodyForMultiCustomerDiscount(any())).thenAnswer(inv -> {
            AddCreditProtectionQuotationRqQuotation rq = inv.getArgument(0);
            rq.getApplicant().add(new AddCreditProtectionQuotationRqQuotationApplicantInner()); // dummy
            return rq;
        });

        AddCreditProtectionQuotationV2RsQuotation quotation = new AddCreditProtectionQuotationV2RsQuotation();
        quotation.setApplicant(new ArrayList<>(List.of(
                new AddCreditProtectionQuotationV2RsQuotationApplicantInner(),
                new AddCreditProtectionQuotationV2RsQuotationApplicantInner()
        )));

        when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenReturn(quotation);

        ResponseEntity<AddCreditProtectionQuotationWarningRs> response =
                controller.getCpQuoteWithAllPremium("en", "Bearer token", request);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getQuotation()).isNotNull();
        assertThat(response.getBody().getQuotation().getApplicant().size()).isEqualTo(1); // dummy removed
    }

    @Test
    void testGetCpQuoteWithAllPremium_MultiCustomerLifeBranch_LN2() throws Exception {
        testMultiCustomerLifeBranch("LN2");
    }

    @Test
    void testGetCpQuoteWithAllPremium_MultiCustomerLifeBranch_LN3() throws Exception {
        testMultiCustomerLifeBranch("LN3");
    }

    private void testMultiCustomerLifeBranch(String productType) throws Exception {
        AddCreditProtectionQuotationRq request = new AddCreditProtectionQuotationRq();
        AddCreditProtectionQuotationRqQuotation infoRq = new AddCreditProtectionQuotationRqQuotation();
        infoRq.setApplicant(new ArrayList<>(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInner())));
        infoRq.setMultiCustomerLifeIndicator(true);

        AddCreditProtectionQuotationRqQuotationCreditApplication creditApp = new AddCreditProtectionQuotationRqQuotationCreditApplication();
        creditApp.setProductTypeCd(productType);
        infoRq.setCreditApplication(creditApp);
        request.setQuotation(infoRq);

        when(cpFac.buildRequestBodyForMultiCustomerDiscount(any())).thenAnswer(inv -> {
            AddCreditProtectionQuotationRqQuotation rq = inv.getArgument(0);
            rq.getApplicant().add(new AddCreditProtectionQuotationRqQuotationApplicantInner()); // dummy
            return rq;
        });

        AddCreditProtectionQuotationV2RsQuotation quotation = new AddCreditProtectionQuotationV2RsQuotation();
        quotation.setApplicant(new ArrayList<>(List.of(
                new AddCreditProtectionQuotationV2RsQuotationApplicantInner(),
                new AddCreditProtectionQuotationV2RsQuotationApplicantInner()
        )));

        when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenReturn(quotation);

        ResponseEntity<AddCreditProtectionQuotationWarningRs> response =
                controller.getCpQuoteWithAllPremium("en", "Bearer token", request);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getQuotation()).isNotNull();
        assertThat(response.getBody().getQuotation().getApplicant().size()).isEqualTo(1); // dummy removed
    }
}