import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GeneratorServiceTest {

    private Series series;
    private GeneratorService generatorService;

    @BeforeEach
    void setUp() {
        series = mock(Series.class);
        generatorService = new GeneratorService(series);
    }

    @Test
    void testInvokeIPIGeneratorEncrypt_success() throws Exception {
        // Mock request with one item
        EncryptRequest.Item item = new EncryptRequest.Item("seed123", "2025-08-24", "SERIES1");
        EncryptRequest request = new EncryptRequest(List.of(item));

        // Mock series behavior
        when(series.getEncryptVal("SERIES1", "seed123")).thenReturn("ENCRYPTED");

        EncryptResponse response = generatorService.invokeIPIGeneratorEncrypt(request);

        assertNotNull(response);
        assertEquals(1, response.responses().size());
        assertEquals("ENCRYPTED", response.responses().get(0).encryptedVal());

        verify(series, times(1)).getEncryptVal("SERIES1", "seed123");
    }

    @Test
    void testEncryptIPIGeneratorOperation_withException() throws Exception {
        EncryptRequest.Item item = new EncryptRequest.Item("seedX", "2025-08-24", "SERIESX");
        EncryptRequest request = new EncryptRequest(List.of(item));

        // Force exception from series
        when(series.getEncryptVal("SERIESX", "seedX")).thenThrow(new GeneratorException("Failed"));

        List<EncryptResponseType> result = generatorService.encryptIPIGeneratorOperation(request);

        assertEquals(1, result.size());
        assertNull(result.get(0)); // because catch returns null
    }

    @Test
    void testDecryptIPIGeneratorOperation_success() throws Exception {
        DecryptRequest request = new DecryptRequest("encryptedVal");

        // Mock return from series
        DecryptVo mockVo = new DecryptVo("CIF123", "PERM_IPI");
        when(series.getDecryptval("encryptedVal")).thenReturn(mockVo);

        DecryptResponse response = generatorService.decryptIPIGeneratorOperation(request);

        assertNotNull(response);
        assertEquals("CIF123", response.customerNumberCIF());
        assertEquals("PERM_IPI", response.permanentIPI());

        verify(series, times(1)).getDecryptval("encryptedVal");
    }
}