@Test
public void testMortgagePopulateStatusCodeBranches() {
    // True branch: statusCode > 0
    AddError mockAddErrorTrue = mock(AddError.class);
    when(mockAddErrorTrue.getAddServerStatusCode()).thenReturn("S3");
    when(mockAddErrorTrue.getAddSeverity()).thenReturn("HIGH");
    when(mockAddErrorTrue.getStatusCode()).thenReturn(123); // >0
    when(mockAddErrorTrue.getStatusDesc()).thenReturn("desc");

    ApiErrorHandler handlerMock = mock(ApiErrorHandler.class);
    when(handlerMock.getAdditionalErrors(anyString())).thenReturn(Arrays.asList(mockAddErrorTrue));

    try (MockedStatic<ApiErrorHandler> mocked = Mockito.mockStatic(ApiErrorHandler.class)) {
        mocked.when(ApiErrorHandler::getInstance).thenReturn(handlerMock);

        try (MockedStatic<ValidatorUtil> validatorMock = Mockito.mockStatic(ValidatorUtil.class)) {
            validatorMock.when(() -> ValidatorUtil.getParamedMsgText(anyString(), anyList()))
                         .thenReturn("processedDesc");

            var list = exception.populateMortgageQuotationadditionalstatus("ID");
            var status = list.get(0);

            // True branch executed
            assertEquals(123, status.getStatusCode());
        }
    }

    // False branch: statusCode = 0
    AddError mockAddErrorFalse = mock(AddError.class);
    when(mockAddErrorFalse.getAddServerStatusCode()).thenReturn("S3");
    when(mockAddErrorFalse.getAddSeverity()).thenReturn("HIGH");
    when(mockAddErrorFalse.getStatusCode()).thenReturn(0);
    when(mockAddErrorFalse.getStatusDesc()).thenReturn("desc");

    when(handlerMock.getAdditionalErrors(anyString())).thenReturn(Arrays.asList(mockAddErrorFalse));

    try (MockedStatic<ApiErrorHandler> mocked = Mockito.mockStatic(ApiErrorHandler.class)) {
        mocked.when(ApiErrorHandler::getInstance).thenReturn(handlerMock);

        try (MockedStatic<ValidatorUtil> validatorMock = Mockito.mockStatic(ValidatorUtil.class)) {
            validatorMock.when(() -> ValidatorUtil.getParamedMsgText(anyString(), anyList()))
                         .thenReturn("processedDesc");

            var list = exception.populateMortgageQuotationadditionalstatus("ID");
            var status = list.get(0);

            // False branch executed
            assertEquals(0, status.getStatusCode());
        }
    }
}