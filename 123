import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
class PartyLookupServiceTest {

    @Mock
    private PartyAPIExecutor apiExecutor;
    @Mock
    private GeneratorService generatorService;
    @Mock
    private ObjectMapper objectMapper;
    @Mock
    private PartyLookupExceptionBuilder exceptionBuilder;

    private PartyLookupService service;

    @BeforeEach
    void setUp() {
        service = new PartyLookupService(
            "http://customerUrl",
            "http://alternateUrl",
            exceptionBuilder,
            apiExecutor,
            generatorService,
            objectMapper
        );
    }

    // ============ MAIN PUBLIC METHOD ============
    @Test
    void testSearchPartyLookupBusinessAggregationOperation_withMaxListSize() throws Exception {
        // mock request
        SearchPartyLookupBusinessAggregationRequestPayload request =
            mock(SearchPartyLookupBusinessAggregationRequestPayload.class);
        when(request.getMaxListSize()).thenReturn(1);

        // build customer response
        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        Business b1 = new Business();
        b1.setKey("C1");
        b1.setFullName("Biz One");
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("US");
        addr.setTerritory("CA");
        addr.setPostalCode("90001");
        addr.setCity("LA");
        b1.setStreetAddress(addr);

        Business b2 = new Business();
        b2.setKey("C2");
        b2.setFullName("Biz Two");
        b2.setStreetAddress(addr);

        customerResp.setBusiness(List.of(b1, b2));

        // stub customer API
        when(apiExecutor.makeGETRequest(contains("customerUrl"), any()))
            .thenReturn("{\"business\":[]}");

        when(objectMapper.readValue(anyString(), eq(RetrieveBusinessListResponse.class)))
            .thenReturn(customerResp);

        // stub alternate API to return null first â†’ so generator kicks in
        when(apiExecutor.makeGETRequest(contains("alternateUrl"), any())).thenReturn(null);

        // stub generator
        EncryptResponseType encType = new EncryptResponseType("C1", "ENC1");
        EncryptResponse encResp = new EncryptResponse(List.of(encType));
        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(encResp);

        // act
        SearchPartyLookupBusinessAggregationResponsePayload result =
            service.searchPartyLookupBusinessAggregationOperation(request);

        // assert
        assertNotNull(result);
        assertEquals(1, result.getParty().size()); // maxListSize=1
        assertEquals("ENC1", result.getParty().get(0).getAlternatePartyId());
    }

    @Test
    void testSearchPartyLookupBusinessAggregationOperation_withoutMaxListSize() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request =
            mock(SearchPartyLookupBusinessAggregationRequestPayload.class);
        when(request.getMaxListSize()).thenReturn(null);

        // build customer response with one business
        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        Business b = new Business();
        b.setKey("B123");
        b.setFullName("Biz");
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("CA");
        addr.setTerritory("ON");
        addr.setPostalCode("M1A1A1");
        addr.setCity("Toronto");
        b.setStreetAddress(addr);
        customerResp.setBusiness(List.of(b));

        when(apiExecutor.makeGETRequest(contains("customerUrl"), any()))
            .thenReturn("{\"business\":[]}");

        when(objectMapper.readValue(anyString(), eq(RetrieveBusinessListResponse.class)))
            .thenReturn(customerResp);

        // alternate API returns response with alternate key
        when(apiExecutor.makeGETRequest(contains("alternateUrl"), any()))
            .thenReturn("{\"partyToAlternateParty\":[{\"alternateKey\":\"ALT-123\"}]}");

        RetrieveAlternatePartyKeyResponse altResp = new RetrieveAlternatePartyKeyResponse();
        PartyToAlternateParty p = new PartyToAlternateParty();
        p.setAlternateKey("ALT-123");
        altResp.setPartyToAlternateParty(List.of(p));

        when(objectMapper.readValue(anyString(), eq(RetrieveAlternatePartyKeyResponse.class)))
            .thenReturn(altResp);

        // act
        SearchPartyLookupBusinessAggregationResponsePayload result =
            service.searchPartyLookupBusinessAggregationOperation(request);

        // assert
        assertNotNull(result);
        assertEquals("ALT-123", result.getParty().get(0).getAlternatePartyId());
    }

    // ============ ADDRESS BUILDER BRANCHES ============
    @Test
    void testBuildCustomerAddressVO_forUS() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = mock(SearchPartyLookupBusinessAggregationRequestPayload.class);

        // prepare US business
        Business b = new Business();
        b.setKey("US1");
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("US");
        addr.setTerritory("NY");
        addr.setPostalCode("10001");
        addr.setCity("NYC");
        b.setStreetAddress(addr);

        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        customerResp.setBusiness(List.of(b));

        when(apiExecutor.makeGETRequest(contains("customerUrl"), any()))
            .thenReturn("{\"business\":[]}");

        when(objectMapper.readValue(anyString(), eq(RetrieveBusinessListResponse.class)))
            .thenReturn(customerResp);

        when(apiExecutor.makeGETRequest(contains("alternateUrl"), any())).thenReturn(null);
        when(generatorService.invokeIPIGeneratorEncrypt(any()))
            .thenReturn(new EncryptResponse(List.of(new EncryptResponseType("US1","ENCRYPTED"))));

        SearchPartyLookupBusinessAggregationResponsePayload result =
            service.searchPartyLookupBusinessAggregationOperation(request);

        assertEquals("ENCRYPTED", result.getParty().get(0).getAlternatePartyId());
        assertEquals("NYC", result.getParty().get(0).getCustomerItemAddress().getAddress().getCity());
    }

    @Test
    void testBuildCustomerAddressVO_forCA() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = mock(SearchPartyLookupBusinessAggregationRequestPayload.class);

        // prepare CA business
        Business b = new Business();
        b.setKey("CA1");
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("CA");
        addr.setTerritory("QC");
        addr.setPostalCode("H2X1X1");
        addr.setCity("Montreal");
        b.setStreetAddress(addr);

        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        customerResp.setBusiness(List.of(b));

        when(apiExecutor.makeGETRequest(contains("customerUrl"), any()))
            .thenReturn("{\"business\":[]}");

        when(objectMapper.readValue(anyString(), eq(RetrieveBusinessListResponse.class)))
            .thenReturn(customerResp);

        when(apiExecutor.makeGETRequest(contains("alternateUrl"), any())).thenReturn(null);
        when(generatorService.invokeIPIGeneratorEncrypt(any()))
            .thenReturn(new EncryptResponse(List.of(new EncryptResponseType("CA1","ENCRYPTED"))));

        SearchPartyLookupBusinessAggregationResponsePayload result =
            service.searchPartyLookupBusinessAggregationOperation(request);

        assertEquals("Montreal", result.getParty().get(0).getCustomerItemAddress().getAddress().getCity());
    }

    @Test
    void testBuildCustomerAddressVO_forOtherCountry() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = mock(SearchPartyLookupBusinessAggregationRequestPayload.class);

        // prepare IN business
        Business b = new Business();
        b.setKey("IN1");
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("IN");
        addr.setTerritory("TN");
        addr.setCity("Chennai");
        b.setStreetAddress(addr);

        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        customerResp.setBusiness(List.of(b));

        when(apiExecutor.makeGETRequest(contains("customerUrl"), any()))
            .thenReturn("{\"business\":[]}");

        when(objectMapper.readValue(anyString(), eq(RetrieveBusinessListResponse.class)))
            .thenReturn(customerResp);

        when(apiExecutor.makeGETRequest(contains("alternateUrl"), any())).thenReturn(null);
        when(generatorService.invokeIPIGeneratorEncrypt(any()))
            .thenReturn(new EncryptResponse(List.of(new EncryptResponseType("IN1","ENCRYPTED"))));

        SearchPartyLookupBusinessAggregationResponsePayload result =
            service.searchPartyLookupBusinessAggregationOperation(request);

        assertEquals("Chennai", result.getParty().get(0).getCustomerItemAddress().getAddress().getCity());
    }
}