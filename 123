import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.util.EntityUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.core.env.Environment;
import org.springframework.core.env.Profiles;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CIFApiClientTest {

    @InjectMocks
    private CIFApiClient cifApiClient;

    @Mock
    private Environment environment;

    @Mock
    private QuoteRequestHeaders reqHeaders;

    @Mock
    private HttpClient httpClient;

    @Mock
    private HttpResponse httpResponse;

    @Mock
    private StatusLine statusLine;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        cifApiClient = spy(new CIFApiClient());
        // setup values for @Value fields
        cifApiClient.cifUrl = "http://dummy.url/@@CIF NUMBER@@";
        cifApiClient.CIF_ENV_ID_KEY = "ENV_ID";
        cifApiClient.CIF_ENG_SYS_KEY = "ENV_SYS";
    }

    @Test
    void testGetIINumber_Normal() throws Exception {
        // simulate LOWER_ENV branch
        when(environment.acceptsProfiles(Profiles.LOWER_ENV)).thenReturn(true);
        when(reqHeaders.getHeaderValue(any(), any())).thenReturn("headerId");

        // mock HttpClient and ResponseHandler
        doReturn(httpClient).when(cifApiClient).getHttpClient(); // assuming you can spy this
        ResponseHandler<String> handler = cifApiClient.getResponseHandler();
        when(httpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                .thenReturn("{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}");

        // execute method
        String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
        assertEquals("123", iiNumber);
    }

    @Test
    void testGetIINumber_NullResponse() throws Exception {
        doReturn(httpClient).when(cifApiClient).getHttpClient();
        when(httpClient.execute(any(HttpGet.class), any(ResponseHandler.class))).thenReturn(null);

        String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
        assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
    }

    @Test
    void testGetIINumber_ClientProtocolException() throws Exception {
        doReturn(httpClient).when(cifApiClient).getHttpClient();
        when(httpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                .thenThrow(new ClientProtocolException("404"));

        String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
        assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
    }

    @Test
    void testGetIINumber_OtherException() throws Exception {
        doReturn(httpClient).when(cifApiClient).getHttpClient();
        when(httpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                .thenThrow(new RuntimeException("other"));

        String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
        assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
    }

    @Test
    void testGetResponseHandler_Success() throws Exception {
        HttpResponse response = mock(HttpResponse.class);
        StatusLine status = mock(StatusLine.class);
        when(status.getStatusCode()).thenReturn(200);
        when(response.getStatusLine()).thenReturn(status);
        when(response.getEntity()).thenReturn(mock(org.apache.http.HttpEntity.class));
        when(EntityUtils.toString(response.getEntity())).thenReturn("body");

        ResponseHandler<String> handler = cifApiClient.getResponseHandler();
        String result = handler.handleResponse(response);
        assertEquals("body", result);
    }

    @Test
    void testGetResponseHandler_Error() {
        HttpResponse response = mock(HttpResponse.class);
        StatusLine status = mock(StatusLine.class);
        when(status.getStatusCode()).thenReturn(500);
        when(response.getStatusLine()).thenReturn(status);

        ResponseHandler<String> handler = cifApiClient.getResponseHandler();
        assertThrows(ClientProtocolException.class, () -> handler.handleResponse(response));
    }
}