import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import java.util.List;

import org.junit.jupiter.api.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.td.tdi.cp.api.cpqte.controller.CreditProtectionQuoteController;
import com.td.tdi.cp.api.cpqte.errorhandling.ApiErrorHandler;
import com.td.tdi.cp.api.cpqte.errorhandling.exception.ApiException;
import com.td.tdi.cp.api.cpqte.model.Status;
import com.td.tdi.cp.api.cpqte.model.errorhandling.AddError;
import com.td.tdi.cp.api.cpqte.model.errorhandling.ErrorConfig;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationRq;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationRqQuotation;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionQuotationRqQuotationCreditApplication;
import com.td.tdi.cp.api.cpqte.model.AddCreditProtectionSimulationErrorRs;
import com.td.tdi.cp.api.cpqte.factory.CreditProtectionQuotationFactory;
import com.td.tdi.cp.api.cpqte.validator.CreditProtectionRequestValidatorUtil;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class CreditProtectionQuoteControllerV1Tests {

    private CreditProtectionQuoteController controller;
    private CreditProtectionQuotationFactory cpFac;
    private CreditProtectionRequestValidatorUtil cpUtil;
    private AddCreditProtectionQuotationRq apiQuoteReq;

    private MockedStatic<ApiErrorHandler> mockedHandler;
    private ApiErrorHandler mockHandlerInstance;

    @BeforeAll
    public void setupStaticMock() {
        mockedHandler = Mockito.mockStatic(ApiErrorHandler.class);
        mockHandlerInstance = mock(ApiErrorHandler.class);
        mockedHandler.when(ApiErrorHandler::getInstance).thenReturn(mockHandlerInstance);
    }

    @AfterAll
    public void tearDownStaticMock() {
        mockedHandler.close();
    }

    @BeforeEach
    public void setup() {
        controller = new CreditProtectionQuoteController();
        cpFac = mock(CreditProtectionQuotationFactory.class);
        cpUtil = mock(CreditProtectionRequestValidatorUtil.class);
        controller.creditProtectionQuotationFactory = cpFac;
        controller.creditProtectionRequestValidatorUtil = cpUtil;

        // Sample quote request
        apiQuoteReq = new AddCreditProtectionQuotationRq();
        AddCreditProtectionQuotationRqQuotation quotation = new AddCreditProtectionQuotationRqQuotation();
        quotation.setCreditApplication(new AddCreditProtectionQuotationRqQuotationCreditApplication());
        apiQuoteReq.setQuotation(quotation);
    }

    @AfterEach
    public void tearDown() {
        controller = null;
        cpFac = null;
        cpUtil = null;
        apiQuoteReq = null;
    }

    // ===== Success path =====
    @Test
    public void testGetCpQuoteSuccess() throws Exception {
        Object mockQuotationRs = mock(Object.class);
        when(cpFac.getCreditProtectionQuotation(any(), any())).thenReturn(mockQuotationRs);

        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getStatus()).isNull();
    }

    // ===== ApiException branch =====
    @Test
    public void testGetCpQuoteApiExceptionBranch() throws Exception {
        // Mock AddError to avoid NPE
        AddError addError = mock(AddError.class);
        when(addError.getAddServerStatusCode()).thenReturn("500");
        when(addError.getStatusCode()).thenReturn(500);
        when(addError.getStatusDesc()).thenReturn("Test error");

        // Mock ApiErrorHandler public methods
        when(mockHandlerInstance.getAdditionalErrors(anyString())).thenReturn(List.of(addError));
        when(mockHandlerInstance.getServerStatusCode(anyString())).thenReturn("500");
        when(mockHandlerInstance.getSeverity(anyString())).thenReturn("CRITICAL");

        // Create ApiException
        ErrorConfig mockErrorConfig = mock(ErrorConfig.class);
        when(mockErrorConfig.getId()).thenReturn("TEST_ID");
        ApiException apiEx = new ApiException(mockErrorConfig);

        // Factory throws ApiException
        when(cpFac.getCreditProtectionQuotation(any(), any())).thenThrow(apiEx);

        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getStatus()).isNotNull();
        assertThat(response.getBody().getStatus().getServerStatusCode()).isEqualTo("500");
        assertThat(response.getBody().getStatus().getAdditionalStatus()).isNotEmpty();
    }

    // ===== NumberFormatException branch =====
    @Test
    public void testGetCpQuoteNumberFormatException() throws Exception {
        AddError addError = mock(AddError.class);
        when(addError.getAddServerStatusCode()).thenReturn("invalid"); // triggers NumberFormatException
        when(addError.getStatusCode()).thenReturn(0);
        when(addError.getStatusDesc()).thenReturn("Test error");

        when(mockHandlerInstance.getAdditionalErrors(anyString())).thenReturn(List.of(addError));
        when(mockHandlerInstance.getServerStatusCode(anyString())).thenReturn("invalid");
        when(mockHandlerInstance.getSeverity(anyString())).thenReturn("CRITICAL");

        ErrorConfig mockErrorConfig = mock(ErrorConfig.class);
        when(mockErrorConfig.getId()).thenReturn("TEST_ID");
        ApiException apiEx = new ApiException(mockErrorConfig);

        when(cpFac.getCreditProtectionQuotation(any(), any())).thenThrow(apiEx);

        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        assertThat(response).isNotNull();
        // Should fallback to default CREATED when parsing fails
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(response.getBody()).isNotNull();
    }

    // ===== Validation failure branch =====
    @Test
    public void testGetCpQuoteValidationFailure() throws Exception {
        doThrow(new RuntimeException("Validation failed"))
                .when(cpUtil).validateCpQuoteRequest(any(), any());

        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getStatus()).isNotNull();
    }
}