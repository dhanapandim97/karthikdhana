@Test
public void testGetCpQuoteV2ApiExceptionBranch() throws Exception {
    // Mock ApiErrorHandler static
    MockedStatic<ApiErrorHandler> mockedHandler = mockStatic(ApiErrorHandler.class);
    ApiErrorHandler mockHandlerInstance = mock(ApiErrorHandler.class);
    mockedHandler.when(ApiErrorHandler::getInstance).thenReturn(mockHandlerInstance);

    // Create a fake Error object to avoid NPE
    com.td.tdi.cp.api.cpqte.model.errorhandling.Error fakeError = mock(com.td.tdi.cp.api.cpqte.model.errorhandling.Error.class);
    when(fakeError.getServerStatusCode()).thenReturn("500");
    when(fakeError.getStatusCode()).thenReturn(500);
    when(fakeError.getStatusDesc()).thenReturn("Test error");

    // Mock methods in ApiErrorHandler
    when(mockHandlerInstance.getAdditionalErrors(anyString()))
            .thenReturn(List.of(fakeError));
    when(mockHandlerInstance.getServerStatusCode(anyString())).thenReturn("500");
    when(mockHandlerInstance.getSeverity(anyString())).thenReturn("CRITICAL"); // use a valid value in your model if required

    // Create ApiException
    ErrorConfig mockErrorConfig = mock(ErrorConfig.class);
    when(mockErrorConfig.getId()).thenReturn("TEST_ID");
    ApiException apiEx = new ApiException(mockErrorConfig);

    // Mock the factory to throw exception
    when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenThrow(apiEx);

    ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
            controller.getCpQuoteWithAllPremium("en", "Bearer token", apiQuoteReqV2);

    assertThat(response).isNotNull();
    assertThat(response.getBody()).isNotNull();
    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);

    mockedHandler.close(); // Release static mock
}