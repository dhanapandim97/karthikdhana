package com.td.tdi.api.ipirg.exception;

import com.td.tdi.api.ipirg.model.request.soap.register.RegisterIPIBusinessAggregationRequest;
import com.td.tdi.api.ipirg.model.request.soap.register.TDEnvelope;
import com.td.tdi.api.ipirg.model.request.soap.register.Messages;
import com.td.tdi.api.ipirg.model.request.soap.register.Header;
import com.td.tdi.api.ipirg.model.request.soap.register.UserProfile;
import com.td.tdi.api.ipirg.model.request.soap.register.Party;
import com.td.tdi.api.ipirg.model.request.soap.register.RegisterIPIBusinessAggregationRequestPayload;

import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.context.MessageSource;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.util.Collections;
import java.util.Locale;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GlobalExceptionHandlerTest {

    private GlobalExceptionHandler handler;

    @Mock
    private HttpServletRequest servletRequest;

    @Mock
    private MessageSource messageSource;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        handler = new GlobalExceptionHandler(messageSource);
    }

    @Test
    void testHandleValidationError_LookupUri() throws Exception {
        // given
        when(servletRequest.getRequestURI()).thenReturn("/lookup");
        when(messageSource.getMessage(anyString(), isNull(), any(Locale.class)))
                .thenReturn("Validation failed");

        ObjectError error = new ObjectError("field", "VALID_CODE");
        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null,
                new org.springframework.validation.BeanPropertyBindingResult(new Object(), "test"));
        ex.getBindingResult().addError(error);

        // when
        ResponseEntity<?> response = handler.handleValidationError(ex, servletRequest);

        // then
        assertEquals(500, response.getStatusCode().value());
        assertEquals(MediaType.APPLICATION_XML, response.getHeaders().getContentType());
        assertNotNull(response.getBody());
    }

    @Test
    void testHandleValidationError_GeneratorUri() throws Exception {
        when(servletRequest.getRequestURI()).thenReturn("/generator");
        when(messageSource.getMessage(anyString(), isNull(), any(Locale.class)))
                .thenReturn("Generator failed");

        ObjectError error = new ObjectError("field", "VALID_CODE");
        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null,
                new org.springframework.validation.BeanPropertyBindingResult(new Object(), "test"));
        ex.getBindingResult().addError(error);

        ResponseEntity<?> response = handler.handleValidationError(ex, servletRequest);

        assertEquals(500, response.getStatusCode().value());
    }

    @Test
    void testHandleValidationError_RegUri() throws Exception {
        when(servletRequest.getRequestURI()).thenReturn("/reg");
        when(messageSource.getMessage(anyString(), isNull(), any(Locale.class)))
                .thenReturn("Registration failed");

        ObjectError error = new ObjectError("field", "VALID_CODE");
        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null,
                new org.springframework.validation.BeanPropertyBindingResult(new Object(), "test"));
        ex.getBindingResult().addError(error);

        ResponseEntity<?> response = handler.handleValidationError(ex, servletRequest);

        assertEquals(500, response.getStatusCode().value());
    }

    @Test
    void testHandleValidationError_DefaultCase_ThrowsException() {
        when(servletRequest.getRequestURI()).thenReturn("/unexpected");

        ObjectError error = new ObjectError("field", "INVALID_CODE");
        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null,
                new org.springframework.validation.BeanPropertyBindingResult(new Object(), "test"));
        ex.getBindingResult().addError(error);

        assertThrows(IllegalArgumentException.class,
                () -> handler.handleValidationError(ex, servletRequest));
    }

    // ✅ Helper to build nested SOAP request
    private RegisterIPIBusinessAggregationRequest buildSoapRequest() {
        Header header = new Header();
        header.setMessageID("001");
        header.setCorrelationID("corr-123");
        header.setSessionID("987654");
        header.setTestset("R2");
        header.setTestsystem("SIT");

        UserProfile userProfile = new UserProfile();
        userProfile.setUserId("jsmith01");
        userProfile.setLocationId("1775");
        userProfile.setConsumerId("CSC");

        Party party = new Party();
        party.setAlternatePartyId("AXU337FI4335388BCAF");

        RegisterIPIBusinessAggregationRequestPayload payload =
                new RegisterIPIBusinessAggregationRequestPayload();
        payload.setUserProfile(userProfile);
        payload.setParty(party);

        Messages messages = new Messages();
        messages.setHeader(header);
        messages.setRegisterIPIBusinessAggregationRequestPayload(payload);

        TDEnvelope envelope = new TDEnvelope();
        envelope.setMessages(messages);

        // ✅ Only top bean uses @Builder
        return RegisterIPIBusinessAggregationRequest.builder()
                .tdenvelope(envelope)
                .build();
    }

    @Test
    void testSoapRequestBuilderWorks() {
        RegisterIPIBusinessAggregationRequest request = buildSoapRequest();
        assertNotNull(request);
        assertNotNull(request.getTdenvelope());
        assertEquals("001", request.getTdenvelope().getMessages().getHeader().getMessageID());
    }
}