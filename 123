import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import com.td.tdi.cp.api.cpqte.errorhandling.exception.ApiParameterizedErrorException;
import com.td.tdi.cp.api.cpqte.errorhandling.handler.ApiErrorHandler;
import com.td.tdi.cp.api.cpqte.errorhandling.util.ValidatorUtil;
import com.td.tdi.cp.api.cpqte.model.AddError;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ApiParameterizedErrorExceptionStatusCodeEdgeTest {

    private List<String> params;
    private ApiParameterizedErrorException exception;

    @BeforeEach
    public void setUp() {
        params = Arrays.asList("param1", "param2", "param3");
        // Use any valid ErrorConfig; content does not matter for this test
        exception = new ApiParameterizedErrorException(
                com.td.tdi.cp.api.cpqte.errorhandling.mapper.ErrorConfig.fromValue(
                        com.td.tdi.cp.api.cpqte.errorhandling.mapper.ErrorIdentifier.APT_DATE_FORMAT_VALIDATION_ERROR.getIdentifier(),
                        com.td.tdi.cp.api.cpqte.errorhandling.mapper.ErrorDisplayLanguage.ENGLISH.getLangStr()
                ),
                params
        );
    }

    private AddError createMockAddError(Integer statusCode) {
        AddError mock = mock(AddError.class);
        when(mock.getAddServerStatusCode()).thenReturn("S1");
        when(mock.getAddSeverity()).thenReturn("HIGH");
        when(mock.getStatusCode()).thenReturn(statusCode);
        when(mock.getStatusDesc()).thenReturn("desc");
        return mock;
    }

    @Test
    public void testStatusCodeMinValueAndZero_AllMethods() {
        // Test values: Integer.MIN_VALUE and 0 (false branch)
        List<Integer> edgeValues = Arrays.asList(Integer.MIN_VALUE, 0);

        for (Integer val : edgeValues) {
            AddError mockAddError = createMockAddError(val);

            ApiErrorHandler handlerMock = mock(ApiErrorHandler.class);
            when(handlerMock.getAdditionalErrors(anyString())).thenReturn(Arrays.asList(mockAddError));

            try (MockedStatic<ApiErrorHandler> mocked = Mockito.mockStatic(ApiErrorHandler.class)) {
                mocked.when(ApiErrorHandler::getInstance).thenReturn(handlerMock);

                try (MockedStatic<ValidatorUtil> validatorMock = Mockito.mockStatic(ValidatorUtil.class)) {
                    validatorMock.when(() -> ValidatorUtil.getParamedMsgText(anyString(), anyList()))
                                 .thenAnswer(invocation -> {
                                     String msg = invocation.getArgument(0, String.class);
                                     return msg == null ? "" : "processed" + msg;
                                 });

                    // ===== Method 1: QuotationAdditionalstatus =====
                    var list1 = exception.populateQuotationAdditionalstatua("ID");
                    assertEquals(1, list1.size());
                    assertEquals(0, list1.get(0).getStatusCode(), "StatusCode should remain 0 for false branch");

                    // ===== Method 2: CreditProtectionAdditionalstatus =====
                    var list2 = exception.populateCreditProtectionQuotationAdditionalstatus("ID");
                    assertEquals(1, list2.size());
                    assertEquals(0, list2.get(0).getStatusCode(), "StatusCode should remain 0 for false branch");

                    // ===== Method 3: MortgageQuotationAdditionalstatus =====
                    var list3 = exception.populateMortgageQuotationadditionalstatus("ID");
                    assertEquals(1, list3.size());
                    assertEquals(0, list3.get(0).getStatusCode(), "StatusCode should remain 0 for false branch");
                }
            }
        }
    }
}