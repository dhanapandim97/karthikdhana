package com.td.tdi.cp.api.cpqte.controller;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import com.td.tdi.cp.api.cpqte.model.*;
import com.td.tdi.cp.api.cpqte.util.CreditProtectionRequestValidatorUtil;
import com.td.tdi.cp.api.cpqte.factory.CreditProtectionQuotationFactory;
import com.td.tdi.cp.api.cpqte.service.LONCreditProtectionQuotationService;
import com.td.tdi.cp.api.cpqte.exception.ApiException;
import com.td.tdi.cp.api.cpqte.exception.ErrorConfig;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class CreditProtectionQuoteControllerTests {

    private CreditProtectionQuoteController controller;
    private CreditProtectionRequestValidatorUtil cpUtil;
    private CreditProtectionQuotationFactory cpFac;
    private LONCreditProtectionQuotationService lonService;

    private AddCreditProtectionQuotationRq apiQuoteReq;
    private AddCreditProtectionQuotationRq apiQuoteReqV2;

    @BeforeEach
    public void setup() throws Exception {
        controller = new CreditProtectionQuoteController();

        cpUtil = mock(CreditProtectionRequestValidatorUtil.class);
        cpFac = mock(CreditProtectionQuotationFactory.class);
        lonService = mock(LONCreditProtectionQuotationService.class);

        // Inject mocks
        controller.creditProtectionRequestValidatorUtil = cpUtil;
        controller.creditProtectionQuotationFactory = cpFac;

        // Inject private LON service using reflection
        Field lonField = CreditProtectionQuoteController.class.getDeclaredField("lonCreditProtectionQuotationservice");
        lonField.setAccessible(true);
        lonField.set(controller, lonService);

        // Sample requests
        apiQuoteReq = createSampleQuoteReq();
        apiQuoteReqV2 = createSampleQuoteReqV2();
    }

    @AfterEach
    public void tearDown() {
        controller = null;
        cpUtil = null;
        cpFac = null;
        lonService = null;
        apiQuoteReq = null;
        apiQuoteReqV2 = null;
    }

    // Utility methods
    private AddCreditProtectionQuotationRq createSampleQuoteReq() {
        AddCreditProtectionQuotationRq req = new AddCreditProtectionQuotationRq();
        AddCreditProtectionQuotationRqQuotation quote = new AddCreditProtectionQuotationRqQuotation();
        AddCreditProtectionQuotationRqQuotationCreditApplication creditApp = new AddCreditProtectionQuotationRqQuotationCreditApplication();
        quote.setCreditApplication(creditApp);
        req.setQuotation(quote);
        return req;
    }

    private AddCreditProtectionQuotationRq createSampleQuoteReqV2() {
        AddCreditProtectionQuotationRq req = new AddCreditProtectionQuotationRq();
        AddCreditProtectionQuotationRqQuotation quote = new AddCreditProtectionQuotationRqQuotation();
        AddCreditProtectionQuotationRqQuotationCreditApplication creditApp = new AddCreditProtectionQuotationRqQuotationCreditApplication();
        // add one applicant inner
        List<AddCreditProtectionQuotationRqQuotationApplicantInner> applicants = new ArrayList<>();
        applicants.add(new AddCreditProtectionQuotationRqQuotationApplicantInner());
        quote.setApplicant(applicants);
        quote.setCreditApplication(creditApp);
        req.setQuotation(quote);
        return req;
    }

    // ---------------- TESTS ------------------

    @Test
    public void testGetCpQuoteSuccess() throws Exception {
        AddCreditProtectionQuotationWarningRsQuotation mockResp = mock(AddCreditProtectionQuotationWarningRsQuotation.class);
        when(cpFac.getCreditProtectionQuotation(any(), any())).thenReturn(mockResp);

        ResponseEntity<AddCreditProtectionQuotationWarningRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        assertThat(response).isNotNull();
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getQuotation()).isEqualTo(mockResp);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
    }

    @Test
    public void testGetCpQuoteApiExceptionBranch() throws Exception {
        // Mock ErrorConfig for ApiException
        ErrorConfig mockErrorConfig = mock(ErrorConfig.class);
        when(mockErrorConfig.getId()).thenReturn("TEST_ID");
        when(mockErrorConfig.getHttpCode()).thenReturn("500");

        ApiException apiEx = new ApiException(mockErrorConfig);
        when(cpFac.getCreditProtectionQuotation(any(), any())).thenThrow(apiEx);

        ResponseEntity<AddCreditProtectionQuotationWarningRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isNotNull();
    }

    @Test
    public void testGetCpQuoteNumberFormatException() throws Exception {
        // Force NumberFormatException in controller by setting invalid server code
        AddCreditProtectionSimulationErrorRs mockStatus = mock(AddCreditProtectionSimulationErrorRs.class);
        when(mockStatus.getServerStatusCode()).thenReturn("invalid");

        ApiException apiEx = new ApiException(mock(ErrorConfig.class)) {
            @Override
            public AddCreditProtectionQuotationWarningRsStatus toWarningStatusResponse() {
                // populate status with invalid server code
                AddCreditProtectionQuotationWarningRsStatus status = new AddCreditProtectionQuotationWarningRsStatus();
                status.setServerStatusCode("invalid"); // triggers NumberFormatException
                return status;
            }
        };
        when(cpFac.getCreditProtectionQuotation(any(), any())).thenThrow(apiEx);

        ResponseEntity<AddCreditProtectionQuotationWarningRs> response =
                controller.getCpQuote("en", "Bearer token", apiQuoteReq);

        assertThat(response).isNotNull();
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
    }

    @Test
    public void testGetCpQuoteV2Success() throws Exception {
        AddCreditProtectionQuotationV2RsQuotation mockRespV2 = mock(AddCreditProtectionQuotationV2RsQuotation.class);
        when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenReturn(mockRespV2);

        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuoteWithAllPremium("en", "Bearer token", apiQuoteReqV2);

        assertThat(response).isNotNull();
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getBody().getQuotation()).isEqualTo(mockRespV2);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
    }

    @Test
    public void testGetCpQuoteV2ApiExceptionBranch() throws Exception {
        ErrorConfig mockErrorConfig = mock(ErrorConfig.class);
        when(mockErrorConfig.getId()).thenReturn("TEST_ID");
        when(mockErrorConfig.getHttpCode()).thenReturn("500");

        ApiException apiEx = new ApiException(mockErrorConfig);
        when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenThrow(apiEx);

        ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
                controller.getCpQuoteWithAllPremium("en", "Bearer token", apiQuoteReqV2);

        assertThat(response).isNotNull();
        assertThat(response.getBody()).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
    }

}