import jakarta.persistence.PersistenceException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Supplier;

import static org.junit.jupiter.api.Assertions.*;

class DbUtilTest {

    private DbUtil dbUtil;

    @BeforeEach
    void setUp() {
        dbUtil = new DbUtil();
        // set private values using ReflectionTestUtils
        ReflectionTestUtils.setField(dbUtil, "DB_CONN_RETRY_DUR_REY", 0); // avoid actual sleep
        ReflectionTestUtils.setField(dbUtil, "DB_CONN_MAX_RETRY_REY", 2);
    }

    // ---- retryDbOperation ----

    @Test
    void testRetryDbOperation_SuccessFirstTry() {
        boolean result = dbUtil.retryDbOperation(() -> {
            // no exception
        });
        assertTrue(result);
    }

    @Test
    void testRetryDbOperation_SuccessAfterRetry() {
        AtomicInteger counter = new AtomicInteger(0);
        boolean result = dbUtil.retryDbOperation(() -> {
            if (counter.getAndIncrement() == 0) {
                throw new PersistenceException("first fail");
            }
        });
        assertTrue(result);
    }

    @Test
    void testRetryDbOperation_FailureExhaustedRetries() {
        boolean result = dbUtil.retryDbOperation(() -> {
            throw new PersistenceException("always fail");
        });
        assertFalse(result);
    }

    @Test
    void testRetryDbOperation_InterruptedDuringSleep() {
        ReflectionTestUtils.setField(dbUtil, "DB_CONN_RETRY_DUR_REY", 1);
        Thread.currentThread().interrupt(); // force interrupt
        boolean result = dbUtil.retryDbOperation(() -> {
            throw new PersistenceException("force retry");
        });
        assertFalse(result);
        assertTrue(Thread.interrupted()); // reset interrupt flag
    }

    // ---- retryDbQueryOperation ----

    @Test
    void testRetryDbQueryOperation_SuccessFirstTry() {
        Object result = dbUtil.retryDbQueryOperation(() -> "value");
        assertEquals("value", result);
    }

    @Test
    void testRetryDbQueryOperation_SuccessAfterRetry() {
        AtomicInteger counter = new AtomicInteger(0);
        Object result = dbUtil.retryDbQueryOperation(() -> {
            if (counter.getAndIncrement() == 0) {
                throw new PersistenceException("fail once");
            }
            return "ok";
        });
        assertEquals("ok", result);
    }

    @Test
    void testRetryDbQueryOperation_FailureExhaustedRetries() {
        Object result = dbUtil.retryDbQueryOperation(() -> {
            throw new PersistenceException("always fail");
        });
        assertNull(result);
    }

    @Test
    void testRetryDbQueryOperation_InterruptedDuringSleep() {
        ReflectionTestUtils.setField(dbUtil, "DB_CONN_RETRY_DUR_REY", 1);
        Thread.currentThread().interrupt(); // force interrupt
        Object result = dbUtil.retryDbQueryOperation(() -> {
            throw new PersistenceException("force fail");
        });
        assertNull(result);
        assertTrue(Thread.interrupted()); // reset interrupt flag
    }
}