package com.td.tdi.api.ipirg.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.td.tdi.api.ipirg.model.request.soap.register.RegisterIPIBusinessAggregationRequest;
import com.td.tdi.api.ipirg.model.request.soap.register.TDEnvelope;
import com.td.tdi.api.ipirg.model.request.soap.register.Messages;
import com.td.tdi.api.ipirg.model.request.soap.register.RegisterIPIBusinessAggregationRequestPayload;
import com.td.tdi.api.ipirg.model.request.soap.register.Party;
import com.td.tdi.api.ipirg.model.response.soap.register.RegisterIPIBusinessAggregationResponsePayload;
import com.td.tdi.api.ipirg.service.external.GeneratorService;
import com.td.tdi.api.ipirg.service.external.PartyAPIExecutor;
import com.td.tdi.api.ipirg.service.exception.GeneratorException;
import com.td.tdi.api.ipirg.service.exception.RegisterException;
import com.td.tdi.api.ipirg.service.exception.RegisterExceptionBuilder;
import com.td.tdi.api.ipirg.service.external.DecryptResponse;

import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RegisterServiceTest {

    @Mock
    private GeneratorService generatorService;
    @Mock
    private ObjectMapper objectMapper;
    @Mock
    private PartyAPIExecutor apiExecutor;
    @Mock
    private RegisterExceptionBuilder registerExceptionBuilder;

    @InjectMocks
    private RegisterService registerService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        registerService = new RegisterService(
                "http://dummy-url",
                generatorService,
                objectMapper,
                apiExecutor,
                registerExceptionBuilder
        );
    }

    private RegisterIPIBusinessAggregationRequest buildValidRequest(String altPartyId) {
        Party party = new Party();
        party.setAlternatePartyId(altPartyId);

        RegisterIPIBusinessAggregationRequestPayload payload = new RegisterIPIBusinessAggregationRequestPayload();
        payload.setParty(party);

        Messages messages = new Messages();
        messages.setRegisterIPIBusinessAggregationRequestPayload(payload);

        TDEnvelope envelope = new TDEnvelope();
        envelope.setMessages(messages);

        return RegisterIPIBusinessAggregationRequest.builder()
                .tdenvelope(envelope)
                .build();
    }

    @Test
    void testRegisterIPISuccess() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildValidRequest("ALT123");

        DecryptResponse decryptResponse = mock(DecryptResponse.class);
        when(generatorService.decryptIPIGeneratorOperation(any()))
                .thenReturn(decryptResponse);
        when(decryptResponse.decryptedValue()).thenReturn("ALT123");
        when(decryptResponse.seedValue()).thenReturn("SEED123");

        HttpResponse httpResponse = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity entity = mock(HttpEntity.class);

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenAnswer(invocation -> {
            return httpResponse;
        });

        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(statusLine.getStatusCode()).thenReturn(201);
        when(httpResponse.getEntity()).thenReturn(entity);
        when(EntityUtils.toString(entity)).thenReturn("{\"registeredIPI\":\"ALT123\"}");

        when(objectMapper.writeValueAsString(any())).thenReturn("{json}");
        when(objectMapper.readValue(anyString(), eq(String.class))).thenReturn("success");

        RegisterIPIBusinessAggregationResponsePayload resp =
                registerService.registerIPIBusinessAggregation(request, "corrId");

        assertEquals("ALT123", resp.getRegisteredIPI());
    }

    @Test
    void testDecryptMissingThrowsException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildValidRequest("ALT123");

        DecryptResponse decryptResponse = mock(DecryptResponse.class);
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);
        when(decryptResponse.decryptedValue()).thenReturn(null);
        when(decryptResponse.seedValue()).thenReturn(null);

        assertThrows(GeneratorException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }

    @Test
    void testWarningResponseThrowsRegisterException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildValidRequest("ALT123");

        DecryptResponse decryptResponse = mock(DecryptResponse.class);
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);
        when(decryptResponse.decryptedValue()).thenReturn("ALT123");
        when(decryptResponse.seedValue()).thenReturn("SEED123");

        HttpResponse httpResponse = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity entity = mock(HttpEntity.class);

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(statusLine.getStatusCode()).thenReturn(400);
        when(httpResponse.getEntity()).thenReturn(entity);
        when(EntityUtils.toString(entity)).thenReturn("{\"warning\":\"something\"}");

        when(apiExecutor.isStatusResponse(anyString())).thenReturn(true);
        when(objectMapper.readValue(anyString(), eq(com.td.tdi.api.ipirg.model.response.Warning.class)))
                .thenReturn(new com.td.tdi.api.ipirg.model.response.Warning("ERR01"));

        when(registerExceptionBuilder.createRegisterException(any()))
                .thenReturn(new RegisterException("ERR01"));

        assertThrows(RegisterException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }

    @Test
    void testRuntimeFailureBranch() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildValidRequest("ALT123");

        DecryptResponse decryptResponse = mock(DecryptResponse.class);
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);
        when(decryptResponse.decryptedValue()).thenReturn("ALT123");
        when(decryptResponse.seedValue()).thenReturn("SEED123");

        HttpResponse httpResponse = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(httpResponse);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(statusLine.getStatusCode()).thenReturn(500);
        when(httpResponse.getEntity()).thenReturn(null);

        assertThrows(RuntimeException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }
}