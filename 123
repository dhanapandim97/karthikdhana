@Test
void testEnglishBranch_NoEnFlag() {
    PropertiesFileReader reader = createReaderWith("K1", "TextWithoutEn");
    String res = reader.getKeyValueItem("K1", ErrorDisplayLanguage.ENGLISH);
    assertEquals("K1:TextWithoutEn", res); // branch A
}

@Test
void testEnglishBranch_EnBeforeFr() {
    PropertiesFileReader reader = createReaderWith("K2", "Some[EN]Hello[FR]Bonjour");
    String res = reader.getKeyValueItem("K2", ErrorDisplayLanguage.ENGLISH);
    assertEquals("K2:Hello", res); // branch B
}

@Test
void testEnglishBranch_OnlyEn() {
    PropertiesFileReader reader = createReaderWith("K3", "Word[EN]OnlyEnglish");
    String res = reader.getKeyValueItem("K3", ErrorDisplayLanguage.ENGLISH);
    assertEquals("K3:OnlyEnglish", res); // branch C
}

@Test
void testFrenchBranch_NoFrFlag() {
    PropertiesFileReader reader = createReaderWith("K4", "NoFrenchHere");
    String res = reader.getKeyValueItem("K4", ErrorDisplayLanguage.FRENCH);
    assertEquals("K4:NoFrenchHere", res); // branch D
}

@Test
void testFrenchBranch_FrBeforeEn() {
    PropertiesFileReader reader = createReaderWith("K5", "Stuff[FR]Bonjour[EN]Hello");
    String res = reader.getKeyValueItem("K5", ErrorDisplayLanguage.FRENCH);
    assertEquals("K5:Bonjour", res); // branch E
}

@Test
void testFrenchBranch_OnlyFr() {
    PropertiesFileReader reader = createReaderWith("K6", "Msg[FR]Seulement");
    String res = reader.getKeyValueItem("K6", ErrorDisplayLanguage.FRENCH);
    assertEquals("K6:Seulement", res); // branch F
}

@Test
void testDefaultBranch_FinalReturn() {
    PropertiesFileReader reader = createReaderWith("K7", "PlainValue");
    // Mock an enum constant not ENGLISH/FRENCH
    ErrorDisplayLanguage fakeLang = mock(ErrorDisplayLanguage.class);
    when(fakeLang.getLangStr()).thenReturn("XX");

    String res = reader.getKeyValueItem("K7", fakeLang);
    assertEquals("K7:PlainValue", res); // branch G
}