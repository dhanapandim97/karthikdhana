import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.ByteArrayInputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RegisterServiceTest {

    @Mock
    private GeneratorService generatorService;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private PartyAPIExecutor apiExecutor;

    @Mock
    private RegisterExceptionBuilder registerExceptionBuilder;

    @InjectMocks
    private RegisterService registerService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        registerService = new RegisterService(
                "http://fake-url",
                generatorService,
                objectMapper,
                apiExecutor,
                registerExceptionBuilder
        );
    }

    @Test
    void testRegisterIPIBusinessAggregation_Success() throws Exception {
        // Arrange
        RegisterIPIBusinessAggregationRequest request = mock(RegisterIPIBusinessAggregationRequest.class);
        ReqEnvelope envelope = mock(ReqEnvelope.class);
        Messages messages = mock(Messages.class);
        RegisterIPIBusinessAggregationRequestPayload payload = mock(RegisterIPIBusinessAggregationRequestPayload.class);
        Party party = mock(Party.class);

        when(request.getrdenvelope()).thenReturn(envelope);
        when(envelope.getMeasages()).thenReturn(messages);
        when(messages.getRegiaterIPIBugineagAggregationRequestPayload()).thenReturn(payload);
        when(payload.getParty()).thenReturn(party);

        DecryptResponse decryptResponse = new DecryptResponse("decryptedPartyId", "alternatePartyId");
        when(generatorService.decryptIPIGeneratoroperation(any())).thenReturn(decryptResponse);

        HttpResponse httpResponse = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity httpEntity = mock(HttpEntity.class);

        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(statusLine.getStatusCode()).thenReturn(201);
        when(httpResponse.getEntity()).thenReturn(httpEntity);
        when(httpEntity.getContent()).thenReturn(new ByteArrayInputStream("{\"ok\":\"yes\"}".getBytes()));

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn("{\"ok\":\"yes\"}");
        when(objectMapper.readValue(anyString(), eq(AddPartyAlternatePartyKeyResponse.class)))
                .thenReturn(new AddPartyAlternatePartyKeyResponse());

        // Act
        RegisterIPIBusinessAggregationResponsePayload resp =
                registerService.registerIPIBusinessAggregation(request, "corr-1");

        // Assert
        assertNotNull(resp);
        assertEquals("alternatePartyId", resp.getRegisteredIPI());
    }

    @Test
    void testRegisterIPIBusinessAggregation_ThrowsGeneratorException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = mock(RegisterIPIBusinessAggregationRequest.class);
        when(generatorService.decryptIPIGeneratoroperation(any()))
                .thenReturn(new DecryptResponse(null, null));

        assertThrows(GeneratorException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corr-2"));
    }

    @Test
    void testCreateAlternatePartyID_StatusNot201_WithStatusResponse() throws Exception {
        // Arrange
        String fakeResp = "{\"status\":\"ERROR\"}";

        HttpResponse httpResponse = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity entity = mock(HttpEntity.class);

        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(statusLine.getStatusCode()).thenReturn(400);
        when(httpResponse.getEntity()).thenReturn(entity);
        when(entity.getContent()).thenReturn(new ByteArrayInputStream(fakeResp.getBytes()));

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(fakeResp);
        when(apiExecutor.isStatusResponse(fakeResp)).thenReturn(true);
        Warning warning = new Warning();
        warning.setStatus("ERROR");
        when(objectMapper.readValue(fakeResp, Warning.class)).thenReturn(warning);
        when(registerExceptionBuilder.createRegisterException("ERROR"))
                .thenReturn(new RegisterException("bad"));

        // Act & Assert
        assertThrows(RegisterException.class,
                () -> registerService.registerIPIBusinessAggregation(mock(RegisterIPIBusinessAggregationRequest.class), "corr-3"));
    }

    @Test
    void testCreateAlternatePartyID_NullResponse() throws Exception {
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(null);

        assertThrows(RuntimeException.class,
                () -> registerService.registerIPIBusinessAggregation(mock(RegisterIPIBusinessAggregationRequest.class), "corr-4"));
    }
}