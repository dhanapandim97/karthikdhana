import org.junit.jupiter.api.Test;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertNotNull;

class KeyValueServiceDefaultTest {

    @Test
    void testDefaultCase() throws Exception {
        KeyValueService service = new KeyValueService();

        // setup keyValueItems
        service.setKeyValueItems(Map.of("HELLO", "[en]Hello[fr]Bonjour"));

        // create fake enum instance using reflection
        Class<ErrorDisplayLanguage> enumClass = ErrorDisplayLanguage.class;
        Constructor<ErrorDisplayLanguage> ctor = enumClass.getDeclaredConstructor(String.class, int.class);
        ctor.setAccessible(true);

        ErrorDisplayLanguage fakeEnum = ctor.newInstance("FAKE", -1); // name doesn't exist in enum, ordinal=-1

        // invoke method with reflection
        Method m = KeyValueService.class.getDeclaredMethod(
                "getKeyValueItem", String.class, ErrorDisplayLanguage.class);
        m.setAccessible(true);

        Object result = m.invoke(service, "HELLO", fakeEnum);
        assertNotNull(result);

        System.out.println("Default branch executed: " + result);
    }
}