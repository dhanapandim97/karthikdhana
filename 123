import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PropertiesFileReaderExtraCoverageTest {

    private Properties props;

    private PropertiesFileReader createReaderWith(String key, String value) {
        props = new Properties();
        props.setProperty(key, value);

        try (MockedStatic<ApiConfig> mockedApi = mockStatic(ApiConfig.class)) {
            ApiConfig apiConfig = mock(ApiConfig.class);
            when(ApiConfig.getInstance()).thenReturn(apiConfig);
            when(apiConfig.getPropertiesConfig("testfile")).thenReturn(props);
            return new PropertiesFileReader("testfile");
        }
    }

    @Test
    void testEnglishBranchB_FrAfterEn() {
        PropertiesFileReader reader = createReaderWith("R1", "Reason[EN]Hello[FR]Bonjour");
        String result = reader.getKeyValueItem("R1", ErrorDisplayLanguage.ENGLISH);
        assertTrue(result.contains("Hello"));
    }

    @Test
    void testFrenchBranchE_EnAfterFr() {
        PropertiesFileReader reader = createReaderWith("R2", "Reason[FR]Bonjour[EN]Hello");
        String result = reader.getKeyValueItem("R2", ErrorDisplayLanguage.FRENCH);
        assertTrue(result.contains("Bonjour"));
    }

    @Test
    void testDefaultBranchG() {
        // Use a fake language to hit "default"
        PropertiesFileReader reader = createReaderWith("R3", "ReasonWithoutFlags");
        ErrorDisplayLanguage fakeLang = new ErrorDisplayLanguage() {
            @Override public String getLangStr() { return "ZZ"; }
        };
        String result = reader.getKeyValueItem("R3", fakeLang);
        assertTrue(result.contains("ReasonWithoutFlags"));
    }
}