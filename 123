import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.core.env.Environment;
import org.springframework.test.util.ReflectionTestUtils;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class CIFApiClientTest {

    private CIFApiClient cifApiClient;
    private QuoteRequestHeaders reqHeaders;

    @BeforeEach
    void setUp() {
        cifApiClient = new CIFApiClient();
        cifApiClient.cifUrl = "http://dummy.url/@@CIF NUMBER@@";
        cifApiClient.CIF_ENV_ID_KEY = "ENV_ID";
        cifApiClient.CIF_ENG_SYS_KEY = "ENV_SYS";

        reqHeaders = mock(QuoteRequestHeaders.class);
    }

    @Test
    void testGetIINumber_LowerEnv_Normal() throws Exception {
        // Mock private Environment
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);
        when(reqHeaders.getHeaderValue(anyString())).thenReturn("headerId");

        // Mock OAuthClient and CloseableHttpClient
        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);
        try (MockedStatic<OAuthClient> mocked = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mocked.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Mock execute() to trigger private getResponseHandler
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<String> handler = invocation.getArgument(1);
                        return "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}";
                    });

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals("123", iiNumber);
        }
    }

    @Test
    void testGetIINumber_LowerEnv_HeaderEmpty_Exception() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);
        when(reqHeaders.getHeaderValue(anyString())).thenReturn(null);

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);
        try (MockedStatic<OAuthClient> mocked = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mocked.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Force generic exception
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenThrow(new RuntimeException("unexpected error"));

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
        }
    }

    @Test
    void testGetIINumber_UpperEnv_ClientProtocolException() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(false);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(true);

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);
        try (MockedStatic<OAuthClient> mocked = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mocked.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Simulate ClientProtocolException
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenThrow(new ClientProtocolException("404"));

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
        }
    }

    @Test
    void testGetIINumber_UpperEnv_HeaderBlank_RuntimeException() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(false);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(true);
        when(reqHeaders.getHeaderValue(anyString())).thenReturn(null);

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);
        try (MockedStatic<OAuthClient> mocked = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mocked.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Force generic RuntimeException
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenThrow(new RuntimeException("unexpected error"));

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
        }
    }
}