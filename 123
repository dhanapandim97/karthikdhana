import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.MDC;

import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.DispatcherType;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

class TraceabilityIdFilterTest {

    private TraceabilityIdFilter filter;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private FilterChain chain;

    @Mock
    private FilterConfig filterConfig;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        filter = new TraceabilityIdFilter();
    }

    @Test
    void testInit() {
        filter.init(filterConfig);
        // just checking no exception
    }

    @Test
    void testDestroy() {
        filter.destroy();
        // just checking no exception
    }

    @Test
    void testDoFilter_AsyncDispatcher() throws IOException, ServletException {
        when(request.getDispatcherType()).thenReturn(DispatcherType.ASYNC);

        filter.doFilter(request, response, chain);

        // verify filter chain is still called
        verify(chain, times(1)).doFilter(request, response);
        // ensure MDC not populated
        assertNotNull(MDC.getCopyOfContextMap()); // could be null or empty
    }

    @Test
    void testDoFilter_WithTraceabilityIdHeader() throws IOException, ServletException {
        when(request.getDispatcherType()).thenReturn(DispatcherType.REQUEST);
        when(request.getHeader(QuoteRequestHeaders.TRACEABILITY_ID)).thenReturn("trace-123");

        filter.doFilter(request, response, chain);

        verify(response, times(1)).addHeader(eq(QuoteRequestHeaders.TRACEABILITY_ID), anyString());
        verify(chain, times(1)).doFilter(request, response);
    }

    @Test
    void testDoFilter_GenerateTraceabilityIdWhenMissing() throws IOException, ServletException {
        when(request.getDispatcherType()).thenReturn(DispatcherType.REQUEST);
        when(request.getHeader(QuoteRequestHeaders.TRACEABILITY_ID)).thenReturn(null);

        filter.doFilter(request, response, chain);

        verify(response, times(1)).addHeader(eq(QuoteRequestHeaders.TRACEABILITY_ID), anyString());
        verify(chain, times(1)).doFilter(request, response);
    }
}