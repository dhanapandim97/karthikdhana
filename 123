import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.*;

import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.entity.StringEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
class PartyLookupServiceTest {

    @Mock
    private PartyAPIExecutor apiExecutor;
    @Mock
    private GeneratorService generatorService;
    @Mock
    private ObjectMapper objectMapper;
    @Mock
    private PartyLookupExceptionBuilder exceptionBuilder;

    @InjectMocks
    private PartyLookupService service;

    @BeforeEach
    void setUp() {
        service = new PartyLookupService(
            "http://customerUrl",
            "http://alternateUrl",
            exceptionBuilder,
            apiExecutor,
            generatorService,
            objectMapper
        );
    }

    // ---------- searchPartyLookupBusinessAggregationOperation ----------
    @Test
    void testSearchPartyLookupBusinessAggregationOperation_success() throws Exception {
        // mock request
        SearchPartyLookupBusinessAggregationRequestPayload request =
            mock(SearchPartyLookupBusinessAggregationRequestPayload.class);

        // mock response
        RetrieveBusinessListResponse customerResponse = new RetrieveBusinessListResponse();
        Business business = new Business();
        business.setKey("123");
        business.setFullName("Test Business");
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("US");
        addr.setTerritory("CA");
        addr.setPostalCode("90001");
        addr.setCity("Los Angeles");
        addr.setAddressLine1("Line1");
        addr.setAddressLine2("Line2");
        business.setStreetAddress(addr);
        customerResponse.setBusiness(List.of(business));

        // stub getCustomerPartySearchResponse
        PartyLookupService spyService = Mockito.spy(service);
        doReturn(customerResponse).when(spyService).getCustomerPartySearchResponse(any());
        doReturn(new HashMap<>()).when(spyService).retrieveAndMapAlternatePartyIDs(any(), any());
        doReturn(List.of(Party.builder().alternatePartyId("ALT123").build()))
            .when(spyService).buildListOfPartyVO(any(), any());

        SearchPartyLookupBusinessAggregationResponsePayload result =
            spyService.searchPartyLookupBusinessAggregationOperation(request);

        assertNotNull(result);
        assertFalse(result.getParty().isEmpty());
    }

    // ---------- getCustomerPartySearchResponse ----------
    @Test
    void testGetCustomerPartySearchResponse_success() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request =
            mock(SearchPartyLookupBusinessAggregationRequestPayload.class);
        SearchCriteria searchCriteria = mock(SearchCriteria.class);
        OrganizationCriteria orgCriteria = mock(OrganizationCriteria.class);

        when(request.getSearchCriteria()).thenReturn(searchCriteria);
        when(searchCriteria.getOrganizationCriteria()).thenReturn(orgCriteria);
        when(orgCriteria.getName()).thenReturn("ABC");
        when(orgCriteria.getBranch()).thenReturn("BR1");

        // simulate different responses based on URL
        when(apiExecutor.makeGETRequest(anyString(), any())).thenAnswer(invocation -> {
            String url = invocation.getArgument(0, String.class);
            if (url.contains("customerUrl")) {
                return "{ \"business\": [] }";
            }
            return "{}";
        });

        when(objectMapper.readValue(anyString(), eq(RetrieveBusinessListResponse.class)))
            .thenReturn(new RetrieveBusinessListResponse());

        RetrieveBusinessListResponse resp = service.getCustomerPartySearchResponse(request);

        assertNotNull(resp);
    }

    // ---------- retrieveAndMapAlternatePartyIDs ----------
    @Test
    void testRetrieveAndMapAlternatePartyIDs_success() throws Exception {
        RetrieveBusinessListResponse resp = new RetrieveBusinessListResponse();
        Business b = new Business();
        b.setKey("123");
        b.setFullName("Biz");
        resp.setBusiness(List.of(b));

        when(apiExecutor.makeGETRequest(contains("alternateUrl"), any()))
            .thenReturn("{\"partyToAlternateParty\":[{\"alternateKey\":\"ALT-1\"}]}");

        RetrieveAlternatePartyKeyResponse altResp = new RetrieveAlternatePartyKeyResponse();
        PartyToAlternateParty p = new PartyToAlternateParty();
        p.setAlternateKey("ALT-1");
        altResp.setPartyToAlternateParty(List.of(p));

        when(objectMapper.readValue(anyString(), eq(RetrieveAlternatePartyKeyResponse.class)))
            .thenReturn(altResp);

        HashMap<String, String> result =
            service.retrieveAndMapAlternatePartyIDs(resp, mock(SearchPartyLookupBusinessAggregationRequestPayload.class));

        assertEquals("ALT-1", result.get("123"));
    }

    @Test
    void testRetrieveAndMapAlternatePartyIDs_withException() throws Exception {
        RetrieveBusinessListResponse resp = new RetrieveBusinessListResponse();
        Business b = new Business();
        b.setKey("123");
        resp.setBusiness(List.of(b));

        when(apiExecutor.makeGETRequest(anyString(), any())).thenThrow(new RuntimeException("fail"));

        HashMap<String, String> result =
            service.retrieveAndMapAlternatePartyIDs(resp, mock(SearchPartyLookupBusinessAggregationRequestPayload.class));

        assertTrue(result.containsKey("123"));
        assertNull(result.get("123"));
    }

    // ---------- buildListOfPartyVO ----------
    @Test
    void testBuildListOfPartyVO_success() {
        RetrieveBusinessListResponse resp = new RetrieveBusinessListResponse();
        Business b = new Business();
        b.setKey("123");
        b.setFullName("Biz");
        b.setAliasName("Alias");
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("CA");
        addr.setTerritory("ON");
        addr.setPostalCode("M1A1A1");
        addr.setCity("Toronto");
        b.setStreetAddress(addr);
        resp.setBusiness(List.of(b));

        HashMap<String, String> map = new HashMap<>();
        map.put("123", "ALT123");

        List<Party> parties = service.buildListOfPartyVO(resp, map);

        assertEquals(1, parties.size());
        assertEquals("ALT123", parties.get(0).getAlternatePartyId());
    }

    // ---------- buildCustomerAddressVO ----------
    @Test
    void testBuildCustomerAddressVO_US() {
        Business b = new Business();
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("US");
        addr.setTerritory("CA");
        addr.setPostalCode("90001");
        addr.setCity("LA");
        b.setStreetAddress(addr);

        CustomerItemAddress address = service.buildCustomerAddressVO(b);
        assertNotNull(address.getAddress().getCountrySubdivision().getAmericanSubdivision());
    }

    @Test
    void testBuildCustomerAddressVO_CA() {
        Business b = new Business();
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("CA");
        addr.setTerritory("ON");
        addr.setPostalCode("M1A1A1");
        addr.setCity("Toronto");
        b.setStreetAddress(addr);

        CustomerItemAddress address = service.buildCustomerAddressVO(b);
        assertNotNull(address.getAddress().getCountrySubdivision().getCanadianSubdivision());
    }

    @Test
    void testBuildCustomerAddressVO_Other() {
        Business b = new Business();
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd("IN");
        addr.setTerritory("TN");
        addr.setCity("Chennai");
        b.setStreetAddress(addr);

        CustomerItemAddress address = service.buildCustomerAddressVO(b);
        assertNotNull(address.getAddress().getCountrySubdivision().getOtherCountrySubdivision());
    }
}