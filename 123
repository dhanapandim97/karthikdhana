import static org.mockito.Mockito.*;

import org.mockito.MockedStatic;

// inside your test
@Test
public void testGetCpQuoteV2ApiExceptionBranch() throws Exception {
    // Mock ApiErrorHandler
    MockedStatic<ApiErrorHandler> mockedHandler = mockStatic(ApiErrorHandler.class);
    ApiErrorHandler mockHandlerInstance = mock(ApiErrorHandler.class);
    mockedHandler.when(ApiErrorHandler::getInstance).thenReturn(mockHandlerInstance);

    // Mock methods used in ApiException
    when(mockHandlerInstance.getServerStatusCode(anyString())).thenReturn("500");
    when(mockHandlerInstance.getSeverity(anyString())).thenReturn("ERROR");
    when(mockHandlerInstance.getAdditionalErrors(anyString())).thenReturn(List.of(mock(AddError.class)));

    // ApiException with mocked ErrorConfig
    ErrorConfig mockErrorConfig = mock(ErrorConfig.class);
    when(mockErrorConfig.getId()).thenReturn("TEST_ID");
    ApiException apiEx = new ApiException(mockErrorConfig);

    // Mock factory to throw this exception
    when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenThrow(apiEx);

    ResponseEntity<AddCreditProtectionSimulationErrorRs> response =
            controller.getCpQuoteWithAllPremium("en", "Bearer token", apiQuoteReqV2);

    assertThat(response).isNotNull();
    assertThat(response.getBody()).isNotNull();
    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);

    mockedHandler.close(); // important to release static mock
}