import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;

class PartyAPIExecutorTest {

    private PartyAPIExecutor executor;
    private HttpClient mockClient;
    private OAuthClient mockOAuth;

    @BeforeEach
    void setUp() throws Exception {
        mockClient = mock(HttpClient.class);
        mockOAuth = mock(OAuthClient.class);

        // Mock static method OAuthClient.getInstance()
        MockedStatic<OAuthClient> oAuthClientStatic = Mockito.mockStatic(OAuthClient.class);
        oAuthClientStatic.when(OAuthClient::getInstance).thenReturn(mockOAuth);

        when(mockOAuth.getSyncClient()).thenReturn(mockClient);
        doNothing().when(mockOAuth).addClientCredentialsToken(any(HttpGet.class));
        doNothing().when(mockOAuth).addClientCredentialsToken(any(HttpPost.class));
    }

    @Test
    void testMakeGETRequest_DEVProfile_addsHeaders() throws Exception {
        executor = new PartyAPIExecutor("xid", "xsys", "dev");

        ResponseHandler<String> handler = response -> "OK";
        when(mockClient.execute(any(HttpGet.class), any(ResponseHandler.class))).thenReturn("OK");

        String result = executor.makeGETRequest("http://test.com", handler);

        assertEquals("OK", result);
        verify(mockClient).execute(any(HttpGet.class), any(ResponseHandler.class));
    }

    @Test
    void testMakeGETRequest_SITProfile_addsHeaders() throws Exception {
        executor = new PartyAPIExecutor("xid", "xsys", "sit");

        ResponseHandler<String> handler = response -> "OK";
        when(mockClient.execute(any(HttpGet.class), any(ResponseHandler.class))).thenReturn("OK");

        String result = executor.makeGETRequest("http://test.com", handler);

        assertEquals("OK", result);
    }

    @Test
    void testMakeGETRequest_OtherProfile_noHeaders() throws Exception {
        executor = new PartyAPIExecutor("xid", "xsys", "prod");

        ResponseHandler<String> handler = response -> "OK";
        when(mockClient.execute(any(HttpGet.class), any(ResponseHandler.class))).thenReturn("OK");

        String result = executor.makeGETRequest("http://test.com", handler);

        assertEquals("OK", result);
    }

    @Test
    void testMakePOSTRequest_DEVProfile_addsHeadersAndPayload() throws Exception {
        executor = new PartyAPIExecutor("xid", "xsys", "dev");

        ResponseHandler<String> handler = response -> "POST_OK";
        when(mockClient.execute(any(HttpPost.class), any(ResponseHandler.class))).thenReturn("POST_OK");

        String result = executor.makePOSTRequest("http://test.com", "{\"key\":\"value\"}", handler);

        assertEquals("POST_OK", result);
        verify(mockClient).execute(any(HttpPost.class), any(ResponseHandler.class));
    }

    @Test
    void testMakePOSTRequest_SITProfile_addsHeaders() throws Exception {
        executor = new PartyAPIExecutor("xid", "xsys", "sit");

        ResponseHandler<String> handler = response -> "POST_OK";
        when(mockClient.execute(any(HttpPost.class), any(ResponseHandler.class))).thenReturn("POST_OK");

        String result = executor.makePOSTRequest("http://test.com", "{\"key\":\"value\"}", handler);

        assertEquals("POST_OK", result);
    }

    @Test
    void testMakePOSTRequest_OtherProfile_noHeaders() throws Exception {
        executor = new PartyAPIExecutor("xid", "xsys", "uat");

        ResponseHandler<String> handler = response -> "POST_OK";
        when(mockClient.execute(any(HttpPost.class), any(ResponseHandler.class))).thenReturn("POST_OK");

        String result = executor.makePOSTRequest("http://test.com", "{\"key\":\"value\"}", handler);

        assertEquals("POST_OK", result);
    }

    @Test
    void testIsStatusResponse_true() {
        executor = new PartyAPIExecutor("xid", "xsys", "dev");

        String json = "{\"status\":\"ok\"}";
        assertTrue(executor.isStatusResponse(json));
    }

    @Test
    void testIsStatusResponse_false_noStatus() {
        executor = new PartyAPIExecutor("xid", "xsys", "dev");

        String json = "{\"message\":\"ok\"}";
        assertFalse(executor.isStatusResponse(json));
    }

    @Test
    void testIsStatusResponse_false_invalidJson() {
        executor = new PartyAPIExecutor("xid", "xsys", "dev");

        String badJson = "not-json";
        assertFalse(executor.isStatusResponse(badJson));
    }
}