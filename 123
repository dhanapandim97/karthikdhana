@Test
void testGetIINumber_LowerEnv_Normal_Spy() throws Exception {
    Environment mockEnv = mock(Environment.class);
    ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

    when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
    when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);
    when(reqHeaders.getHeaderValue(anyString())).thenReturn("headerId");

    CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);
    HttpGet mockGet = mock(HttpGet.class);

    // Spy CIFApiClient
    CIFApiClient spyClient = spy(cifApiClient);

    // Mock OAuthClient
    try (MockedStatic<OAuthClient> mockedOAuth = mockStatic(OAuthClient.class)) {
        OAuthClient mockOAuthClient = mock(OAuthClient.class);
        mockedOAuth.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);
        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
        doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

        // Override private getResponseHandler() to return a mock ResponseHandler
        doReturn((ResponseHandler<String>) response -> 
                "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}")
                .when(spyClient).getResponseHandler();

        String iiNumber = spyClient.getIINumber(reqHeaders, "12345", "jwt");
        assertEquals("123", iiNumber);
    }
}