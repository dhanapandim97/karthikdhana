package com.td.tdi.cp.api.cpqte.cif;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.*;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.util.EntityUtils;
import org.junit.jupiter.api.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.core.env.Environment;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.IOException;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CIFApiClientTest {

    private static MockedStatic<OAuthClient> oauthClientStatic;

    private CIFApiClient cifApiClient;
    private Environment mockEnv;
    private OAuthClient mockOAuthClient;
    private CloseableHttpClient mockHttpClient;
    private ObjectMapper mockMapper;

    @BeforeAll
    static void beforeAll() {
        oauthClientStatic = Mockito.mockStatic(OAuthClient.class);
    }

    @AfterAll
    static void afterAll() {
        oauthClientStatic.close();
    }

    @BeforeEach
    void setUp() {
        cifApiClient = new CIFApiClient();

        mockEnv = mock(Environment.class);
        mockOAuthClient = mock(OAuthClient.class);
        mockHttpClient = mock(CloseableHttpClient.class);
        mockMapper = mock(ObjectMapper.class);

        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);
        ReflectionTestUtils.setField(cifApiClient, "cifUrl", "http://cif/123");
        ReflectionTestUtils.setField(cifApiClient, "CIF_ENV_ID_KEY", "EID");
        ReflectionTestUtils.setField(cifApiClient, "CIF_ENG_SYS_KEY", "ESYS");

        oauthClientStatic.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);
        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
    }

    @Test
    void testGetIINumber_LowerEnv_Normal() throws Exception {
        QuoteRequestHeaders mockHdrs = mock(QuoteRequestHeaders.class);
        when(mockEnv.acceptsProfiles(anyString())).thenReturn(true);
        when(mockHdrs.getHeaderValue(anyString())).thenReturn("123");

        when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                .thenAnswer(inv -> {
                    ResponseHandler<String> rh = inv.getArgument(1);
                    StatusLine statusLine = mock(StatusLine.class);
                    when(statusLine.getStatusCode()).thenReturn(200);
                    HttpResponse resp = mock(HttpResponse.class);
                    when(resp.getStatusLine()).thenReturn(statusLine);
                    HttpEntity entity = mock(HttpEntity.class);
                    when(resp.getEntity()).thenReturn(entity);
                    try (MockedStatic<EntityUtils> eu = Mockito.mockStatic(EntityUtils.class)) {
                        eu.when(() -> EntityUtils.toString(entity)).thenReturn("{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}");
                        return rh.handleResponse(resp);
                    }
                });

        CIFAPIResponse mockResp = new CIFAPIResponse();
        PartyToAlternatePartyKey p = new PartyToAlternatePartyKey();
        p.setAlternateKey("123");
        mockResp.setPartyToAlternatePartyKey(Collections.singletonList(p));
        when(mockMapper.readValue(anyString(), eq(CIFAPIResponse.class))).thenReturn(mockResp);
        ReflectionTestUtils.setField(cifApiClient, "log", org.slf4j.LoggerFactory.getLogger("test"));

        String result = cifApiClient.getIINumber(mockHdrs, "123", "jwt");
        assertEquals("123", result);
    }

    @Test
    void testGetIINumber_Exception_Default() throws Exception {
        QuoteRequestHeaders mockHdrs = mock(QuoteRequestHeaders.class);
        when(mockEnv.acceptsProfiles(anyString())).thenReturn(true);
        when(mockHdrs.getHeaderValue(anyString())).thenReturn("123");

        when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                .thenThrow(new IOException("boom"));

        String result = cifApiClient.getIINumber(mockHdrs, "123", "jwt");
        assertEquals(Constants.DEFAULT_II_NUMBER, result);
    }

    @Test
    void testGetAccessToken_Success() throws Exception {
        OAuthRequestBuilder builder = mock(OAuthRequestBuilder.class);
        OAuthRequest req = mock(OAuthRequest.class);
        OAuthResponse resp = mock(OAuthResponse.class);

        when(builder.withClientCredentialsRequest()).thenReturn(builder);
        when(builder.endClientCredentialsRequest()).thenReturn(builder);
        when(builder.build()).thenReturn(req);

        try (MockedStatic<OAuthRequestBuilder> rb = Mockito.mockStatic(OAuthRequestBuilder.class);
             MockedStatic<OAuthSDRService> sdr = Mockito.mockStatic(OAuthSDRService.class)) {

            rb.when(OAuthRequestBuilder::new).thenReturn(builder);

            OAuthSDRService mockSrv = mock(OAuthSDRService.class);
            sdr.when(OAuthSDRService::new).thenReturn(mockSrv);
            when(mockSrv.getToken(req)).thenReturn(resp);
            when(resp.getAccessToken()).thenReturn("token123");

            String token = cifApiClient.getAccessToken();
            assertEquals("token123", token);
        }
    }

    @Test
    void testGetAccessToken_ApiConfigException() {
        OAuthRequestBuilder builder = mock(OAuthRequestBuilder.class);

        try (MockedStatic<OAuthRequestBuilder> rb = Mockito.mockStatic(OAuthRequestBuilder.class)) {
            rb.when(OAuthRequestBuilder::new).thenReturn(builder);
            when(builder.withClientCredentialsRequest()).thenThrow(new ApiConfigException("bad"));

            assertThrows(ApiException.class, () -> cifApiClient.getAccessToken());
        }
    }

    @Test
    void testGetResponseHandler_Success() throws Exception {
        ResponseHandler<String> handler = ReflectionTestUtils.invokeMethod(cifApiClient, "getResponseHandler");

        StatusLine statusLine = mock(StatusLine.class);
        when(statusLine.getStatusCode()).thenReturn(200);
        HttpResponse resp = mock(HttpResponse.class);
        when(resp.getStatusLine()).thenReturn(statusLine);
        HttpEntity entity = mock(HttpEntity.class);
        when(resp.getEntity()).thenReturn(entity);

        try (MockedStatic<EntityUtils> eu = Mockito.mockStatic(EntityUtils.class)) {
            eu.when(() -> EntityUtils.toString(entity)).thenReturn("ok");
            String result = handler.handleResponse(resp);
            assertEquals("ok", result);
        }
    }

    @Test
    void testGetResponseHandler_Error() {
        ResponseHandler<String> handler = ReflectionTestUtils.invokeMethod(cifApiClient, "getResponseHandler");

        StatusLine statusLine = mock(StatusLine.class);
        when(statusLine.getStatusCode()).thenReturn(500);
        HttpResponse resp = mock(HttpResponse.class);
        when(resp.getStatusLine()).thenReturn(statusLine);
        HttpEntity entity = mock(HttpEntity.class);
        when(resp.getEntity()).thenReturn(entity);

        try (MockedStatic<EntityUtils> eu = Mockito.mockStatic(EntityUtils.class)) {
            eu.when(() -> EntityUtils.toString(entity)).thenReturn("err");
            assertThrows(ClientProtocolException.class, () -> handler.handleResponse(resp));
        }
    }
}