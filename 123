import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.ResponseHandler;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class CIFApiClientTest {

    private CIFApiClient cifApiClient;
    private QuoteRequestHeaders reqHeaders;

    @BeforeEach
    void setUp() {
        cifApiClient = new CIFApiClient();
        cifApiClient.cifUrl = "http://dummy.url/@@CIF NUMBER@@";
        cifApiClient.CIF_ENV_ID_KEY = "ENV_ID";
        cifApiClient.CIF_ENG_SYS_KEY = "ENV_SYS";

        reqHeaders = mock(QuoteRequestHeaders.class);
    }

    @Test
    void testGetIINumber_LowerEnv_Normal() throws Exception {
        // Environment branch
        Environment env = mock(Environment.class);
        cifApiClient.environment = env;
        when(env.acceptsProfiles("lower-env")).thenReturn(true);

        when(reqHeaders.getHeaderValue(anyString())).thenReturn("headerId");

        HttpClient mockHttpClient = mock(HttpClient.class);
        try (MockedStatic<OAuthClient> mocked = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mocked.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // mock execute to simulate ResponseHandler returning valid JSON
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<String> handler = invocation.getArgument(1);
                        HttpResponse response = mock(HttpResponse.class);
                        StatusLine statusLine = mock(StatusLine.class);
                        when(statusLine.getStatusCode()).thenReturn(200);
                        when(response.getStatusLine()).thenReturn(statusLine);
                        return "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}";
                    });

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals("123", iiNumber);
        }
    }

    @Test
    void testGetIINumber_ExceptionPath() throws Exception {
        // Force exception to hit catch blocks
        Environment env = mock(Environment.class);
        cifApiClient.environment = env;
        when(env.acceptsProfiles("lower-env")).thenReturn(true);

        HttpClient mockHttpClient = mock(HttpClient.class);
        try (MockedStatic<OAuthClient> mocked = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mocked.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // throw ClientProtocolException to cover catch branch
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenThrow(new org.apache.http.client.ClientProtocolException("404"));

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
        }
    }
}