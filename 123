import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.node.JsonNodeType;

import java.io.IOException;

public class ProductConstraintDeserializer
        extends StdDeserializer<ProductConstraint>
        implements ContextualDeserializer {

    private final JsonDeserializer<Object> defaultDeserializer;

    public ProductConstraintDeserializer() {
        super(ProductConstraint.class);
        this.defaultDeserializer = null;
    }

    private ProductConstraintDeserializer(JsonDeserializer<?> defaultDeserializer) {
        super(ProductConstraint.class);
        this.defaultDeserializer = (JsonDeserializer<Object>) defaultDeserializer;
    }

    @Override
    public ProductConstraint deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        JsonNode node = p.getCodec().readTree(p);

        // Case 1: plain text <Product>*</Product>
        if (node.getNodeType() == JsonNodeType.STRING || node.isTextual()) {
            ProductConstraint product = new ProductConstraint();
            String text = node.asText();
            if (!"*".equals(text)) {
                product.setRawText(text);
            }
            return product;
        }

        // Case 2: structured XML -> delegate to default
        if (defaultDeserializer != null) {
            return (ProductConstraint) defaultDeserializer.deserialize(p, ctxt);
        }

        return new ProductConstraint();
    }

    @Override
    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
            throws JsonMappingException {
        JsonDeserializer<?> deser =
                ctxt.findRootValueDeserializer(ctxt.constructType(ProductConstraint.class));
        return new ProductConstraintDeserializer(deser);
    }
}