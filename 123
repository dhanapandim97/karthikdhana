package com.td.tdi.cp.api.cpqte.cif;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.*;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.jupiter.api.*;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.core.env.Environment;
import org.springframework.core.env.Profiles;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.IOException;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class CIFApiClientTest {

    private CIFApiClient cifApiClient;
    private Environment mockEnv;
    private QuoteRequestHeaders mockHeaders;
    private OAuthClient mockOAuthClient;
    private CloseableHttpClient mockHttpClient;

    @BeforeEach
    void setUp() {
        mockEnv = mock(Environment.class);
        mockHeaders = mock(QuoteRequestHeaders.class);
        mockOAuthClient = mock(OAuthClient.class);
        mockHttpClient = mock(CloseableHttpClient.class);

        cifApiClient = new CIFApiClient();

        // inject private environment using ReflectionTestUtils
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

        // set URL + keys
        cifApiClient.cifUrl = "http://cif-url/@@CIF_NUMBER@@";
        cifApiClient.CIF_ENV_ID_KEY = "DEF_ENV";
        cifApiClient.CIF_ENG_SYS_KEY = "DEF_SYS";

        // static mock for OAuthClient.getInstance()
        MockedStatic<OAuthClient> staticOAuth = Mockito.mockStatic(OAuthClient.class);
        staticOAuth.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);
    }

    @Test
    void testGetIINumber_LowerEnv_Normal() throws Exception {
        when(mockEnv.acceptsProfiles(any(Profiles.class))).thenReturn(true);
        when(mockHeaders.getHeaderValue("ACCEPT_TESTSET_HEADER_KEY")).thenReturn("ENV123");
        when(mockHeaders.getHeaderValue("ACCEPT_TESTSYSTEM_HEADER_KEY")).thenReturn("SYS123");
        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);

        HttpResponse response = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity entity = mock(HttpEntity.class);
        when(statusLine.getStatusCode()).thenReturn(200);
        when(response.getStatusLine()).thenReturn(statusLine);
        when(response.getEntity()).thenReturn(entity);

        try (MockedStatic<EntityUtils> eu = Mockito.mockStatic(EntityUtils.class)) {
            eu.when(() -> EntityUtils.toString(entity))
              .thenReturn("{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}");

            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                .thenAnswer(inv -> {
                    ResponseHandler<String> handler = inv.getArgument(1);
                    return handler.handleResponse(response);
                });

            try (MockedConstruction<ObjectMapper> om = Mockito.mockConstruction(
                    ObjectMapper.class,
                    (mock, ctx) -> when(mock.readValue(anyString(), eq(CIFAPIResponse.class)))
                            .thenReturn(buildResponse("123"))
            )) {
                String result = cifApiClient.getIINumber(mockHeaders, "999", "jwt");
                assertEquals("123", result);
            }
        }
    }

    @Test
    void testGetIINumber_UpperEnv() throws Exception {
        when(mockEnv.acceptsProfiles(any(Profiles.class))).thenReturn(true);
        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);

        HttpResponse response = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity entity = mock(HttpEntity.class);
        when(statusLine.getStatusCode()).thenReturn(200);
        when(response.getStatusLine()).thenReturn(statusLine);
        when(response.getEntity()).thenReturn(entity);

        try (MockedStatic<EntityUtils> eu = Mockito.mockStatic(EntityUtils.class)) {
            eu.when(() -> EntityUtils.toString(entity))
              .thenReturn("{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"ABC999\"}]}");

            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                .thenAnswer(inv -> {
                    ResponseHandler<String> handler = inv.getArgument(1);
                    return handler.handleResponse(response);
                });

            try (MockedConstruction<ObjectMapper> om = Mockito.mockConstruction(
                    ObjectMapper.class,
                    (mock, ctx) -> when(mock.readValue(anyString(), eq(CIFAPIResponse.class)))
                            .thenReturn(buildResponse("ABC999"))
            )) {
                String result = cifApiClient.getIINumber(mockHeaders, "111", "jwt");
                assertEquals("ABC999", result);
            }
        }
    }

    @Test
    void testGetIINumber_NotFound404() throws Exception {
        when(mockEnv.acceptsProfiles(any(Profiles.class))).thenReturn(true);
        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
        when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
            .thenThrow(new ClientProtocolException("404"));

        String result = cifApiClient.getIINumber(mockHeaders, "404", "jwt");
        assertEquals(Constants.DEFAULT_II_NUMBER, result);
    }

    @Test
    void testGetIINumber_GenericException() throws Exception {
        when(mockEnv.acceptsProfiles(any(Profiles.class))).thenReturn(true);
        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
        when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
            .thenThrow(new IOException("boom"));

        String result = cifApiClient.getIINumber(mockHeaders, "X", "jwt");
        assertEquals(Constants.DEFAULT_II_NUMBER, result);
    }

    @Test
    void testGetAccessToken_Normal() throws Exception {
        OAuthResponse mockResponse = mock(OAuthResponse.class);
        when(mockResponse.getAccessToken()).thenReturn("TOKEN123");

        // even though OAuthSDRService doesn't exist in your code, Mockito will create a dummy
        try (MockedConstruction<OAuthSDRService> service = Mockito.mockConstruction(
                OAuthSDRService.class,
                (mock, ctx) -> when(mock.getToken(any())).thenReturn(mockResponse)
        )) {
            String token = cifApiClient.getAccessToken();
            assertEquals("TOKEN123", token);
        }
    }

    @Test
    void testGetAccessToken_ConfigError() {
        try (MockedConstruction<OAuthRequestBuilder> builder = Mockito.mockConstruction(
                OAuthRequestBuilder.class,
                (mock, ctx) -> {
                    when(mock.withClientCredentialsRequest()).thenThrow(new ApiConfigException("bad"));
                }
        )) {
            assertThrows(ApiException.class, () -> cifApiClient.getAccessToken());
        }
    }

    // --- helpers ---
    private CIFAPIResponse buildResponse(String key) {
        CIFAPIResponse resp = new CIFAPIResponse();
        PartyToAlternatePartyKey party = new PartyToAlternatePartyKey();
        party.setAlternateKey(key);
        resp.setPartyToAlternatePartyKey(Collections.singletonList(party));
        return resp;
    }
}