@Test
void test_setPremiumsForMTG_subsequenceQuote_LCoverage() throws Exception {
    // Arrange
    AddCreditProtectionQuotationWarningRsQuotationApplicantInnerQuotationItemInner quotationItemRs =
            new AddCreditProtectionQuotationWarningRsQuotationApplicantInnerQuotationItemInner();
    quotationItemRs.setInsuranceCoverageTypeCd("L");
    quotationItemRs.setStatusCd("A");
    quotationItemRs.setCoveragePct(BigDecimal.valueOf(50));

    CpPlanMasterDetail cpPlan = new CpPlanMasterDetail();
    cpPlan.setPlanType("L");
    cpPlan.setPlanCode("ME");
    cpPlan.setBenefitCalcMethod(CreditProtectionConstants.BENEFIT_CALC_METHOD);
    when(cpMasterDetailDAOMock.getCpPlanMasterDetailListMtg()).thenReturn(List.of(cpPlan));

    AddCreditProtectionQuotationRqQuotationApplicantInner applicantInfoRq =
            new AddCreditProtectionQuotationRqQuotationApplicantInner();
    applicantInfoRq.setQuotationItem(new ArrayList<>());

    BigDecimal loanAmt = BigDecimal.valueOf(100000);

    // Mock util methods
    doReturn(quotationItemRs).when(creditProtectionCommonUtil).assignErrorMessage(any(), any(), any(), any());
    doReturn(quotationItemRs).when(creditProtectionCommonBusinessRulesUtil).calculateCoveragePctAmt(
            any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), any(), any(), any(), any(), any(), any(), anyBoolean(), anyBoolean(), any());
    doReturn(quotationItemRs).when(creditProtectionCommonBusinessRulesUtil).calculatePremium(
            any(), any(), any(), any(), any(), anyInt(), anyInt(), any(), any(), any());

    // Act
    AddCreditProtectionQuotationWarningRsQuotationApplicantInnerQuotationItemInner result =
            mortgageCreditProtectionQuotationServiceMock.setPremiumsForMTG(
                    quotationItemRs,
                    false,
                    "SUBSEQ", // requestTypeCd triggers subsequence branch
                    BigDecimal.valueOf(60),
                    BigDecimal.valueOf(50000),
                    applicantInfoRq,
                    "MTG",
                    ErrorDisplayLanguage.EN,
                    loanAmt,
                    BigDecimal.ZERO,
                    30,
                    "P123",
                    BigDecimal.valueOf(20000),
                    new ArrayList<>(),
                    "ON",
                    120,
                    "M",
                    false,
                    false,
                    BigDecimal.valueOf(0)
            );

    // Assert
    assertNotNull(result);
    assertEquals(loanAmt.setScale(2), result.getCoverageAmt(), "CoverageAmt should be set to 100% loanAmt");
}