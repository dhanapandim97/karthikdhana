import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

@Configuration
public class JacksonXmlConfig {

    @Bean
    public MappingJackson2XmlHttpMessageConverter xmlConverter() {
        XmlMapper mapper = new XmlMapper();
        mapper.setDefaultUseWrapper(false);

        return new MappingJackson2XmlHttpMessageConverter(mapper) {
            @Override
            protected void writeInternal(Object object, HttpOutputMessage outputMessage)
                    throws IOException, HttpMessageNotWritableException {
                // 1. Generate XML from Jackson
                String xml = mapper.writeValueAsString(object);

                // 2. Force XML declaration with double quotes
                if (!xml.startsWith("<?xml")) {
                    xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + xml;
                }

                // 3. Expand all self-closing tags
                xml = xml.replaceAll("<(\\w+)([^>]*)/>", "<$1$2></$1>");

                // 4. Write final XML
                outputMessage.getBody().write(xml.getBytes(
                        outputMessage.getHeaders().getContentType() != null
                                && outputMessage.getHeaders().getContentType().getCharset() != null
                        ? outputMessage.getHeaders().getContentType().getCharset()
                        : StandardCharsets.UTF_8
                ));
            }
        };
    }
}