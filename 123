@Test
public void testPopulateQuotationAdditionalStatus_StatusCodeEdges() {
    AddError mockAddError = mock(AddError.class);
    when(mockAddError.getAddServerStatusCode()).thenReturn("S1");
    when(mockAddError.getAddSeverity()).thenReturn("HIGH");

    // Test Integer.MIN_VALUE
    when(mockAddError.getStatusCode()).thenReturn(Integer.MIN_VALUE);
    when(mockAddError.getStatusDesc()).thenReturn("desc");
    ApiErrorHandler handlerMock = mock(ApiErrorHandler.class);
    when(handlerMock.getAdditionalErrors(anyString())).thenReturn(Arrays.asList(mockAddError));

    try (MockedStatic<ApiErrorHandler> mocked = Mockito.mockStatic(ApiErrorHandler.class)) {
        mocked.when(ApiErrorHandler::getInstance).thenReturn(handlerMock);
        try (MockedStatic<ValidatorUtil> validatorMock = Mockito.mockStatic(ValidatorUtil.class)) {
            validatorMock.when(() -> ValidatorUtil.getParamedMsgText("desc", params)).thenReturn("processedDesc");

            var list = exception.populateQuotationAdditionalstatua("ID");
            var status = list.get(0);

            // StatusCode should NOT be set
            assertEquals(0, status.getStatusCode());
        }
    }

    // Test statusCode = 0
    when(mockAddError.getStatusCode()).thenReturn(0);
    var list2 = exception.populateQuotationAdditionalstatua("ID");
    var status2 = list2.get(0);
    assertEquals(0, status2.getStatusCode());
}