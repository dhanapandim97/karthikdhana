package com.td.tdi.api.ipirg.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.td.tdi.api.ipirg.exception.RegisterException;
import com.td.tdi.api.ipirg.model.request.soap.register.*;
import com.td.tdi.api.ipirg.model.response.register.RegisterIPIBusinessAggregationResponsePayload;
import com.td.tdi.api.ipirg.model.response.register.Warning;
import com.td.tdi.api.ipirg.model.response.register.AddPartyAlternatePartyKeyResponse;
import com.td.tdi.api.ipirg.service.helper.DecryptResponse;
import org.apache.http.HttpEntity;
import org.apache.http.StatusLine;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.entity.StringEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

class RegisterServiceTest {

    @Mock
    private GeneratorService generatorService;

    @Mock
    private ApiExecutor apiExecutor;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private RegisterService registerService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    // ðŸ”¨ Helper method to build SOAP request
    private RegisterIPIBusinessAggregationRequest buildSoapRequest() {
        Header header = Header.builder()
                .messageID("001")
                .correlationID("corr-123")
                .sessionID("987654")
                .testset("R2")
                .testsystem("SIT")
                .build();

        UserProfile userProfile = UserProfile.builder()
                .userId("jsmith01")
                .locationId("1775")
                .consumerId("CSC")
                .build();

        Party party = Party.builder()
                .alternatePartyId("AXU337FI4335388BCAF")
                .build();

        RegisterIPIBusinessAggregationRequestPayload payload =
                RegisterIPIBusinessAggregationRequestPayload.builder()
                        .userProfile(userProfile)
                        .party(party)
                        .build();

        Messages messages = Messages.builder()
                .header(header)
                .registerIPIBusinessAggregationRequestPayload(payload)
                .build();

        TDEnvelope envelope = TDEnvelope.builder()
                .messages(messages)
                .build();

        return RegisterIPIBusinessAggregationRequest.builder()
                .tdenvelope(envelope)
                .build();
    }

    @Test
    void testHappyPath() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildSoapRequest();

        // Mock decrypt
        DecryptResponse decryptResponse = new DecryptResponse("decryptedIPI", "seedVal");
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);

        // Mock HTTP 201
        CloseableHttpResponse mockResponse = mock(CloseableHttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        when(statusLine.getStatusCode()).thenReturn(201);
        when(mockResponse.getStatusLine()).thenReturn(statusLine);
        HttpEntity entity = new StringEntity("{\"dummy\":\"json\"}");
        when(mockResponse.getEntity()).thenReturn(entity);

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(mockResponse);
        when(objectMapper.readValue(anyString(), eq(AddPartyAlternatePartyKeyResponse.class)))
                .thenReturn(new AddPartyAlternatePartyKeyResponse());

        RegisterIPIBusinessAggregationResponsePayload response =
                registerService.registerIPIBusinessAggregation(request, "corrId");

        assertNotNull(response);
        assertEquals("decryptedIPI", response.getRegisteredIPI());
    }

    @Test
    void testNullResponseThrowsException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildSoapRequest();

        when(generatorService.decryptIPIGeneratorOperation(any()))
                .thenReturn(new DecryptResponse("decryptedIPI", "seedVal"));

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(null);

        assertThrows(RegisterException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }

    @Test
    void testNon201ResponseThrowsException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildSoapRequest();

        when(generatorService.decryptIPIGeneratorOperation(any()))
                .thenReturn(new DecryptResponse("decryptedIPI", "seedVal"));

        CloseableHttpResponse mockResponse = mock(CloseableHttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        when(statusLine.getStatusCode()).thenReturn(400);
        when(mockResponse.getStatusLine()).thenReturn(statusLine);
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(mockResponse);

        assertThrows(RegisterException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }

    @Test
    void testObjectMapperFailureThrowsException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildSoapRequest();

        when(generatorService.decryptIPIGeneratorOperation(any()))
                .thenReturn(new DecryptResponse("decryptedIPI", "seedVal"));

        CloseableHttpResponse mockResponse = mock(CloseableHttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        when(statusLine.getStatusCode()).thenReturn(201);
        when(mockResponse.getStatusLine()).thenReturn(statusLine);
        HttpEntity entity = new StringEntity("{\"dummy\":\"json\"}");
        when(mockResponse.getEntity()).thenReturn(entity);

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(mockResponse);
        when(objectMapper.readValue(anyString(), eq(AddPartyAlternatePartyKeyResponse.class)))
                .thenThrow(new IOException("Parsing failed"));

        assertThrows(RegisterException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }

    @Test
    void testWarningInResponseThrowsException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildSoapRequest();

        when(generatorService.decryptIPIGeneratorOperation(any()))
                .thenReturn(new DecryptResponse("decryptedIPI", "seedVal"));

        CloseableHttpResponse mockResponse = mock(CloseableHttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        when(statusLine.getStatusCode()).thenReturn(201);
        when(mockResponse.getStatusLine()).thenReturn(statusLine);
        HttpEntity entity = new StringEntity("{\"dummy\":\"json\"}");
        when(mockResponse.getEntity()).thenReturn(entity);

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(mockResponse);

        AddPartyAlternatePartyKeyResponse withWarning = new AddPartyAlternatePartyKeyResponse();
        Warning warning = new Warning();
        warning.setStatus("400");
        withWarning.setWarning(warning);

        when(objectMapper.readValue(anyString(), eq(AddPartyAlternatePartyKeyResponse.class)))
                .thenReturn(withWarning);

        assertThrows(RegisterException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }

    @Test
    void testDecryptFailureThrowsException() throws Exception {
        RegisterIPIBusinessAggregationRequest request = buildSoapRequest();

        when(generatorService.decryptIPIGeneratorOperation(any()))
                .thenThrow(new RuntimeException("Decrypt failed"));

        assertThrows(RegisterException.class,
                () -> registerService.registerIPIBusinessAggregation(request, "corrId"));
    }
}