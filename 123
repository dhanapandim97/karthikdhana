private AddCreditProtectionQuotationWarningRs buildMockResponseWithTwoApplicants() {
    AddCreditProtectionQuotationV2RsQuotation quotation = new AddCreditProtectionQuotationV2RsQuotation();
    quotation.setApplicant(new ArrayList<>(List.of(
        new AddCreditProtectionQuotationV2RsQuotationApplicantInner(),
        new AddCreditProtectionQuotationV2RsQuotationApplicantInner() // dummy to remove
    )));

    AddCreditProtectionQuotationWarningRs response = new AddCreditProtectionQuotationWarningRs();
    response.setQuotation(quotation);
    return response;
}

private void runMultiCustomerLifeBranchTest(String productType) throws Exception {
    // Build request
    AddCreditProtectionQuotationRq request = new AddCreditProtectionQuotationRq();
    AddCreditProtectionQuotationRqQuotation infoRq = new AddCreditProtectionQuotationRqQuotation();
    infoRq.setApplicant(new ArrayList<>(List.of(new AddCreditProtectionQuotationRqQuotationApplicantInner())));
    infoRq.setMultiCustomerLifeIndicator(true);

    AddCreditProtectionQuotationRqQuotationCreditApplication creditApp = new AddCreditProtectionQuotationRqQuotationCreditApplication();
    creditApp.setProductTypeCd(productType);
    infoRq.setCreditApplication(creditApp);
    request.setQuotation(infoRq);

    // Mock buildRequestBodyForMultiCustomerDiscount to add dummy applicant
    when(cpFac.buildRequestBodyForMultiCustomerDiscount(any())).thenAnswer(inv -> {
        AddCreditProtectionQuotationRqQuotation rq = inv.getArgument(0);
        rq.getApplicant().add(new AddCreditProtectionQuotationRqQuotationApplicantInner());
        return rq;
    });

    // Mock getCreditProtectionQuotationV2 to return two applicants wrapped in WarningRs
    AddCreditProtectionQuotationWarningRs mockResponse = buildMockResponseWithTwoApplicants();
    when(cpFac.getCreditProtectionQuotationV2(any(), any())).thenReturn(mockResponse.getQuotation());

    // Act
    ResponseEntity<AddCreditProtectionQuotationWarningRs> response =
        controller.getCpQuoteWithAllPremium("en", "Bearer token", request);

    // Assert
    assertThat(response).isNotNull();
    assertThat(response.getBody()).isNotNull();
    assertThat(response.getBody().getQuotation()).isNotNull();
    assertThat(response.getBody().getQuotation().getApplicant()).isNotNull();
    assertThat(response.getBody().getQuotation().getApplicant().size()).isEqualTo(1); // dummy removed
}

@Test
void testMultiCustomerLifeBranch_LN2() throws Exception {
    runMultiCustomerLifeBranchTest("LN2");
}

@Test
void testMultiCustomerLifeBranch_LN3() throws Exception {
    runMultiCustomerLifeBranchTest("LN3");
}