package com.td.tdi.cp.api.cpqte.cif;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.*;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.util.EntityUtils;
import org.junit.jupiter.api.*;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;
import org.springframework.core.env.Profiles;

import java.io.IOException;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CIFApiClientTest {

    @InjectMocks
    private CIFApiClient cifApiClient;

    @Mock
    private Environment mockEnv;

    @Mock
    private QuoteRequestHeaders mockHeaders;

    @Mock
    private OAuthClient mockOAuthClient;

    @Mock
    private CloseableHttpClient mockHttpClient;

    @BeforeEach
    void setup() {
        // inject URL + keys
        cifApiClient.cifUrl = "http://dummy.url/number";
        cifApiClient.CIF_ENV_ID_KEY = "DEF_ENV_ID";
        cifApiClient.CIF_ENG_SYS_KEY = "DEF_ENV_SYS";

        // mock OAuthClient singleton
        try (MockedStatic<OAuthClient> oAuthMock = Mockito.mockStatic(OAuthClient.class)) {
            oAuthMock.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);
        }
    }

    // ------------------------
    // Test 1: Lower Env Normal
    // ------------------------
    @Test
    void testGetIINumber_LowerEnv_Normal() throws Exception {
        when(mockEnv.acceptsProfiles(Profiles.LOWER_ENVS)).thenReturn(true);
        when(mockHeaders.getHeaderValue("ACCEPT_TESTSET_HEADER_KEY")).thenReturn("123");
        when(mockHeaders.getHeaderValue("ACCEPT_TESTSYSTEM_HEADER_KEY")).thenReturn("SYS");

        // Mock response
        HttpResponse httpResponse = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity entity = mock(HttpEntity.class);

        when(statusLine.getStatusCode()).thenReturn(200);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(httpResponse.getEntity()).thenReturn(entity);

        try (MockedStatic<EntityUtils> eu = Mockito.mockStatic(EntityUtils.class)) {
            eu.when(() -> EntityUtils.toString(entity)).thenReturn(
                    "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}"
            );

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            when(mockHttpClient.execute(any(HttpGet.class), any())).thenAnswer(invocation -> {
                ResponseHandler<String> handler = invocation.getArgument(1);
                return handler.handleResponse(httpResponse);
            });

            // Act
            String result = cifApiClient.getIINumber(mockHeaders, "999", "jwt");

            // Assert
            assertEquals("123", result);
        }
    }

    // ------------------------
    // Test 2: Lower Env Exception
    // ------------------------
    @Test
    void testGetIINumber_LowerEnv_Exception() throws Exception {
        when(mockEnv.acceptsProfiles(Profiles.LOWER_ENVS)).thenReturn(true);

        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
        when(mockHttpClient.execute(any(HttpGet.class), any())).thenThrow(new IOException("Boom"));

        String result = cifApiClient.getIINumber(mockHeaders, "999", "jwt");

        assertEquals(Constants.DEFAULT_II_NUMBER, result);
    }

    // ------------------------
    // Test 3: Upper Env Normal
    // ------------------------
    @Test
    void testGetIINumber_UpperEnv() throws Exception {
        when(mockEnv.acceptsProfiles(Profiles.UPPER_ENVS)).thenReturn(true);

        // Mock response
        HttpResponse httpResponse = mock(HttpResponse.class);
        StatusLine statusLine = mock(StatusLine.class);
        HttpEntity entity = mock(HttpEntity.class);

        when(statusLine.getStatusCode()).thenReturn(200);
        when(httpResponse.getStatusLine()).thenReturn(statusLine);
        when(httpResponse.getEntity()).thenReturn(entity);

        try (MockedStatic<EntityUtils> eu = Mockito.mockStatic(EntityUtils.class)) {
            eu.when(() -> EntityUtils.toString(entity)).thenReturn(
                    "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"ABC999\"}]}"
            );

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            when(mockHttpClient.execute(any(HttpGet.class), any())).thenAnswer(invocation -> {
                ResponseHandler<String> handler = invocation.getArgument(1);
                return handler.handleResponse(httpResponse);
            });

            String result = cifApiClient.getIINumber(mockHeaders, "888", "jwt");

            assertEquals("ABC999", result);
        }
    }

    // ------------------------
    // Test 4: 404 Not Found branch
    // ------------------------
    @Test
    void testGetIINumber_NotFound404() throws Exception {
        when(mockEnv.acceptsProfiles(any())).thenReturn(true);

        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
        when(mockHttpClient.execute(any(HttpGet.class), any()))
                .thenThrow(new ClientProtocolException("404"));

        String result = cifApiClient.getIINumber(mockHeaders, "404", "jwt");

        assertEquals(Constants.DEFAULT_II_NUMBER, result);
    }

    // ------------------------
    // Test 5: Other Exception
    // ------------------------
    @Test
    void testGetIINumber_GenericException() throws Exception {
        when(mockEnv.acceptsProfiles(any())).thenReturn(true);

        when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
        when(mockHttpClient.execute(any(HttpGet.class), any()))
                .thenThrow(new RuntimeException("500"));

        String result = cifApiClient.getIINumber(mockHeaders, "500", "jwt");

        assertEquals(Constants.DEFAULT_II_NUMBER, result);
    }

    // ------------------------
    // Test 6: getAccessToken Normal
    // ------------------------
    @Test
    void testGetAccessToken_Normal() throws Exception {
        OAuthRequest mockRequest = mock(OAuthRequest.class);
        OAuthResponse mockResponse = mock(OAuthResponse.class);

        try (MockedConstruction<OAuthRequestBuilder> builderMock =
                     Mockito.mockConstruction(OAuthRequestBuilder.class,
                             (builder, context) -> when(builder.build()).thenReturn(mockRequest))) {

            try (MockedConstruction<OAuthSDRService> serviceMock =
                         Mockito.mockConstruction(OAuthSDRService.class,
                                 (service, context) -> when(service.getToken(mockRequest)).thenReturn(mockResponse))) {

                when(mockResponse.getAccessToken()).thenReturn("token-123");

                String token = cifApiClient.getAccessToken();

                assertEquals("token-123", token);
            }
        }
    }

    // ------------------------
    // Test 7: getAccessToken Config Error
    // ------------------------
    @Test
    void testGetAccessToken_ConfigException() {
        try (MockedConstruction<OAuthRequestBuilder> builderMock =
                     Mockito.mockConstruction(OAuthRequestBuilder.class,
                             (builder, context) -> when(builder.build()).thenThrow(new ApiConfigException("bad config")))) {

            assertThrows(ApiException.class, () -> cifApiClient.getAccessToken());
        }
    }
}