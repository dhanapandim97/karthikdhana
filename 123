@Test
void testCreateAlternatePartyID_successStatus201() throws Exception {
    // Arrange
    String expectedResponse = "success-response";

    HttpResponse httpResponse = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    HttpEntity httpEntity = new StringEntity(expectedResponse);

    when(statusLine.getStatusCode()).thenReturn(201);
    when(httpResponse.getStatusLine()).thenReturn(statusLine);
    when(httpResponse.getEntity()).thenReturn(httpEntity);

    // makePOSTRequest will call the lambda
    when(apiExecutor.makePOSTRequest(anyString(), anyString(), any()))
        .thenAnswer(invocation -> {
            ResponseHandler<String> handler = invocation.getArgument(2);
            return handler.handleResponse(httpResponse);
        });

    // Act
    AddPartyAlternatePartyKeyResponse resp =
            registerService.createAlternatePartyID("party123", "alt456", "corrId");

    // Assert
    assertNotNull(resp);
}



@Test
void testCreateAlternatePartyID_nullBody_throwsRegisterException() throws Exception {
    HttpResponse httpResponse = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    HttpEntity httpEntity = new StringEntity(""); // empty â†’ EntityUtils.toString = ""

    when(statusLine.getStatusCode()).thenReturn(400);
    when(httpResponse.getStatusLine()).thenReturn(statusLine);
    when(httpResponse.getEntity()).thenReturn(httpEntity);

    when(apiExecutor.makePOSTRequest(anyString(), anyString(), any()))
        .thenAnswer(invocation -> {
            ResponseHandler<String> handler = invocation.getArgument(2);
            return handler.handleResponse(httpResponse);
        });

    assertThrows(RegisterException.class, () ->
            registerService.createAlternatePartyID("party123", "alt456", "corrId")
    );
}



@Test
void testCreateAlternatePartyID_warningResponse_throwsCustomException() throws Exception {
    String warningJson = "{\"status\":\"WARN123\"}";

    HttpResponse httpResponse = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    HttpEntity httpEntity = new StringEntity(warningJson);

    when(statusLine.getStatusCode()).thenReturn(400);
    when(httpResponse.getStatusLine()).thenReturn(statusLine);
    when(httpResponse.getEntity()).thenReturn(httpEntity);

    when(apiExecutor.isStatusResponse(anyString())).thenReturn(true);

    Warning warning = new Warning();
    warning.setStatus("WARN123");
    when(objectMapper.readValue(anyString(), eq(Warning.class))).thenReturn(warning);

    RegisterException customEx = new RegisterException("WARN123");
    when(registerExceptionBuilder.createRegisterException("WARN123")).thenReturn(customEx);

    when(apiExecutor.makePOSTRequest(anyString(), anyString(), any()))
        .thenAnswer(invocation -> {
            ResponseHandler<String> handler = invocation.getArgument(2);
            return handler.handleResponse(httpResponse);
        });

    assertThrows(RegisterException.class, () ->
            registerService.createAlternatePartyID("party123", "alt456", "corrId")
    );
}


@Test
void testCreateAlternatePartyID_errorResponse_throwsRuntimeException() throws Exception {
    String errorJson = "{\"error\":\"something went wrong\"}";

    HttpResponse httpResponse = mock(HttpResponse.class);
    StatusLine statusLine = mock(StatusLine.class);
    HttpEntity httpEntity = new StringEntity(errorJson);

    when(statusLine.getStatusCode()).thenReturn(400);
    when(httpResponse.getStatusLine()).thenReturn(statusLine);
    when(httpResponse.getEntity()).thenReturn(httpEntity);

    when(apiExecutor.isStatusResponse(anyString())).thenReturn(false);

    when(apiExecutor.makePOSTRequest(anyString(), anyString(), any()))
        .thenAnswer(invocation -> {
            ResponseHandler<String> handler = invocation.getArgument(2);
            return handler.handleResponse(httpResponse);
        });

    assertThrows(RuntimeException.class, () ->
            registerService.createAlternatePartyID("party123", "alt456", "corrId")
    );
}