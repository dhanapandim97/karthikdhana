import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

class PartyLookupServiceTest {

    @Mock
    private PartyLookupExceptionBuilder exceptionBuilder;

    @Mock
    private PartyAPIExecutor apiExecutor;

    @Mock
    private GeneratorService generatorService;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private PartyLookupService service;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        service = new PartyLookupService(
                "http://customerService/",
                "http://alternateService/",
                exceptionBuilder,
                apiExecutor,
                generatorService,
                objectMapper
        );
    }

    // --------------------- Normal flow ---------------------
    @Test
    void testNormalFlow_allAlternateIdsPresent() throws Exception {
        var request = createRequest(2);
        var customerResp = createCustomerResponse("key1", "key2");

        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        // Mock alternate party API
        for (Business b : customerResp.getBusiness()) {
            String altResp = "{\"partyToAlternateParty\":[{\"alternateKey\":\"alt_" + b.getKey() + "\"}]}";
            when(apiExecutor.makeGETRequest(contains(b.getKey()), any())).thenReturn(altResp);
            RetrieveAlternatePartyKeyResponse altObj = new RetrieveAlternatePartyKeyResponse();
            altObj.setPartyToAlternateParty(List.of(new PartyKeyMapping("alt_" + b.getKey())));
            when(objectMapper.readValue(altResp, RetrieveAlternatePartyKeyResponse.class)).thenReturn(altObj);
        }

        // Encryption not needed
        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(new EncryptResponse(Collections.emptyList()));

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertEquals(2, response.getParty().size());
        assertEquals("alt_key1", response.getParty().get(0).getAlternatePartyId());
    }

    // --------------------- Alternate ID null triggers encryption ---------------------
    @Test
    void testAlternateIdNull_encryption() throws Exception {
        var request = createRequest(1);
        var customerResp = createCustomerResponse("key1");

        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        // Alternate party returns null
        when(apiExecutor.makeGETRequest(contains("key1"), any())).thenReturn(null);

        // Encryption response
        EncryptResponseType encRespType = new EncryptResponseType("key1", "enc_key1");
        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(new EncryptResponse(List.of(encRespType)));

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertEquals("enc_key1", response.getParty().get(0).getAlternatePartyId());
    }

    // --------------------- Customer API failure ---------------------
    @Test
    void testCustomerApiFailure_throwsRuntimeException() {
        var request = createRequest(1);

        when(apiExecutor.makeGETRequest(anyString(), any())).thenThrow(new RuntimeException("API fail"));

        assertThrows(RuntimeException.class,
                () -> service.searchPartyLookupBusinessAggregationOperation(request));
    }

    // --------------------- JSON parsing exception ---------------------
    @Test
    void testAlternatePartyJsonProcessingException() throws Exception {
        var request = createRequest(1);
        var customerResp = createCustomerResponse("key1");

        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        when(apiExecutor.makeGETRequest(contains("key1"), any())).thenReturn("INVALID_JSON");
        when(objectMapper.readValue("INVALID_JSON", RetrieveAlternatePartyKeyResponse.class))
                .thenThrow(JsonProcessingException.class);

        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(new EncryptResponse(Collections.emptyList()));

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertNull(response.getParty().get(0).getAlternatePartyId());
    }

    // --------------------- Different country codes ---------------------
    @Test
    void testBuildCustomerAddressVO_countryCodes() throws Exception {
        var request = createRequest(3);
        var customerResp = createCustomerResponse("key1", "key2", "key3");

        customerResp.getBusiness().get(1).getStreetAddress().setCountryCd("CA");
        customerResp.getBusiness().get(2).getStreetAddress().setCountryCd("IN");

        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        for (Business b : customerResp.getBusiness()) {
            String altResp = "{\"partyToAlternateParty\":[{\"alternateKey\":\"alt_" + b.getKey() + "\"}]}";
            when(apiExecutor.makeGETRequest(contains(b.getKey()), any())).thenReturn(altResp);
            RetrieveAlternatePartyKeyResponse altObj = new RetrieveAlternatePartyKeyResponse();
            altObj.setPartyToAlternateParty(List.of(new PartyKeyMapping("alt_" + b.getKey())));
            when(objectMapper.readValue(altResp, RetrieveAlternatePartyKeyResponse.class)).thenReturn(altObj);
        }

        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(new EncryptResponse(Collections.emptyList()));

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertEquals(3, response.getParty().size());
    }

    // --------------------- Helpers ---------------------
    private SearchPartyLookupBusinessAggregationRequestPayload createRequest(int maxListSize) {
        SearchPartyLookupBusinessAggregationRequestPayload request = new SearchPartyLookupBusinessAggregationRequestPayload();
        request.setMaxListSize(maxListSize);
        OrganizationCriteria orgCriteria = new OrganizationCriteria();
        orgCriteria.setName("TestName");
        request.setSearchCriteria(new SearchCriteria(orgCriteria));
        return request;
    }

    private RetrieveBusinessListResponse createCustomerResponse(String... keys) {
        RetrieveBusinessListResponse resp = new RetrieveBusinessListResponse();
        List<Business> businesses = new ArrayList<>();
        for (String key : keys) {
            businesses.add(new Business(
                    key,
                    "FullName_" + key,
                    "Alias_" + key,
                    createStreetAddress("US")
            ));
        }
        resp.setBusiness(businesses);
        return resp;
    }

    private StreetAddress createStreetAddress(String countryCd) {
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd(countryCd);
        addr.setTerritory("SomeState");
        addr.setPostalCode("12345");
        addr.setAddressLine1("Line1");
        addr.setAddressLine2("Line2");
        addr.setAddressLine3("Line3");
        addr.setCity("City");
        return addr;
    }
}