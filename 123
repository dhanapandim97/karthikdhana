import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;

import java.io.IOException;

public class GenericDelegatingDeserializer<T>
        extends StdDeserializer<T>
        implements ContextualDeserializer {

    private final JsonDeserializer<Object> delegate;
    private final JavaType type;

    public GenericDelegatingDeserializer(JavaType type) {
        super(type);
        this.type = type;
        this.delegate = null;
    }

    private GenericDelegatingDeserializer(JavaType type, JsonDeserializer<?> delegate) {
        super(type);
        this.type = type;
        this.delegate = (JsonDeserializer<Object>) delegate;
    }

    @Override
    @SuppressWarnings("unchecked")
    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        JsonToken token = p.getCurrentToken();

        // Case 1: plain text <Pojo>*</Pojo>
        if (token == JsonToken.VALUE_STRING) {
            String text = p.getText();
            if ("*".equals(text)) {
                // return empty POJO
                return (T) ctxt.findRootValueDeserializer(type).getEmptyValue(ctxt);
            }
        }

        // Case 2: structured XML â†’ delegate without consuming parser
        if (delegate != null) {
            return (T) delegate.deserialize(p, ctxt);
        }

        return (T) ctxt.findRootValueDeserializer(type).getEmptyValue(ctxt);
    }

    @Override
    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
            throws JsonMappingException {
        JsonDeserializer<Object> deser = ctxt.findNonContextualValueDeserializer(type);
        return new GenericDelegatingDeserializer<>(type, deser);
    }
}