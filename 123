import com.td.tdi.api.ipirg.exception.*;
import com.td.tdi.api.ipirg.model.response.soap.lokup.SoapEnvelope;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.context.MessageSource;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;

import java.util.List;
import java.util.Locale;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GlobalExceptionHandlerTest {

    @Mock
    private MessageSource messageSource;

    @InjectMocks
    private GlobalExceptionHandler handler; // your @ControllerAdvice class

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testHandleValidationError_withValidCode() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setRequestURI(GlobalExceptionHandler.LOOKUP_URI);

        var bindingResult = new BeanPropertyBindingResult(new Object(), "test");
        bindingResult.addError(new ObjectError("field", "LOKUP.011")); // VALID_CODES contains "LOKUP."

        MethodArgumentNotValidException ex =
                new MethodArgumentNotValidException(null, bindingResult);

        when(messageSource.getMessage(eq("LOKUP.011"), any(), eq(Locale.getDefault())))
                .thenReturn("Some validation message");

        ResponseEntity<SoapEnvelope> response = handler.handleValidationError(ex, request);

        assertEquals(500, response.getStatusCodeValue());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().toString().contains("LOKUP.011"));
    }

    @Test
    void testHandleValidationError_withFallbackCode() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setRequestURI(GlobalExceptionHandler.GENERATOR_URI);

        var bindingResult = new BeanPropertyBindingResult(new Object(), "test");
        bindingResult.addError(new ObjectError("field", "INVALID_CODE")); // not matching VALID_CODES

        MethodArgumentNotValidException ex =
                new MethodArgumentNotValidException(null, bindingResult);

        when(messageSource.getMessage(eq("IPI00.001"), any(), eq(Locale.getDefault())))
                .thenReturn("Fallback message");

        ResponseEntity<SoapEnvelope> response = handler.handleValidationError(ex, request);

        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().toString().contains("IPI00.001"));
        assertTrue(response.getBody().toString().contains("Fallback message"));
    }

    @Test
    void testHandleConstraintViolation() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setRequestURI(GlobalExceptionHandler.REG_URI);

        ConstraintViolation<?> violation = mock(ConstraintViolation.class);
        when(violation.getMessage()).thenReturn("IPIRG.004");

        ConstraintViolationException ex =
                new ConstraintViolationException(Set.of(violation));

        when(messageSource.getMessage(eq("IPIRG.004"), any(), eq(Locale.getDefault())))
                .thenReturn("Constraint message");

        ResponseEntity<SoapEnvelope> response = handler.handlePartyLookupValidationError(ex, request);

        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().toString().contains("IPIRG.004"));
        assertTrue(response.getBody().toString().contains("Constraint message"));
    }

    @Test
    void testHandlePartyLookupException() {
        PartyLookupException ex = new PartyLookupException("LOKUP.011", "Party lookup failed");

        ResponseEntity<SoapEnvelope> response = handler.handlePartyLookupError(ex);

        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().toString().contains("Party lookup failed"));
    }

    @Test
    void testHandleGeneratorException() {
        GeneratorException ex = new GeneratorException("IPI00.001", "Generator failed");

        ResponseEntity<SoapEnvelope> response = handler.handlePartyLookupError(ex);

        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().toString().contains("IPI00.001"));
    }

    @Test
    void testHandleRegisterException() {
        RegisterException ex = new RegisterException("IPIRG.004", "Register failed");

        ResponseEntity<SoapEnvelope> response = handler.handleRegisterError(ex);

        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().toString().contains("IPIRG.004"));
    }

    @Test
    void testHandleGlobalException() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setRequestURI(GlobalExceptionHandler.LOOKUP_URI);

        Exception ex = new RuntimeException("Something went wrong");

        when(messageSource.getMessage(eq("LOKUP.011"), any(), eq(Locale.getDefault())))
                .thenReturn("Default error message");

        ResponseEntity<SoapEnvelope> response = handler.handleGlobalError(ex, request);

        assertEquals(500, response.getStatusCodeValue());
        assertTrue(response.getBody().toString().contains("Default error message"));
    }
}