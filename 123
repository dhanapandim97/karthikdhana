import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.core.env.Environment;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class CIFApiClientTest {

    private CIFApiClient cifApiClient;
    private QuoteRequestHeaders reqHeaders;

    @BeforeEach
    void setUp() {
        cifApiClient = new CIFApiClient();
        cifApiClient.cifUrl = "http://dummy.url/@@CIF NUMBER@@";
        cifApiClient.CIF_ENV_ID_KEY = "ENV_ID";
        cifApiClient.CIF_ENG_SYS_KEY = "ENV_SYS";

        reqHeaders = mock(QuoteRequestHeaders.class);
    }

    // ===== getIINumber() Tests =====

    @Test
    void testGetIINumber_LowerEnv_Normal() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);
        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);
        when(reqHeaders.getHeaderValue(anyString())).thenReturn("headerId");

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);

        try (MockedStatic<OAuthClient> mockedOAuth = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mockedOAuth.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Mock execute() to invoke ResponseHandler
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<String> handler = invocation.getArgument(1);
                        HttpResponse mockResponse = mock(HttpResponse.class);
                        HttpEntity mockEntity = mock(HttpEntity.class);
                        StatusLine mockStatusLine = mock(StatusLine.class);
                        when(mockResponse.getStatusLine()).thenReturn(mockStatusLine);
                        when(mockStatusLine.getStatusCode()).thenReturn(200);
                        when(mockResponse.getEntity()).thenReturn(mockEntity);

                        // Static mock EntityUtils.toString to return JSON
                        try (MockedStatic<org.apache.http.util.EntityUtils> entityUtilsMock = mockStatic(org.apache.http.util.EntityUtils.class)) {
                            String json = "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}";
                            entityUtilsMock.when(() -> org.apache.http.util.EntityUtils.toString(any(HttpEntity.class)))
                                    .thenReturn(json);

                            return handler.handleResponse(mockResponse);
                        }
                    });

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals("123", iiNumber);
        }
    }

    @Test
    void testGetIINumber_LowerEnv_ExceptionPath() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);
        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);
        when(reqHeaders.getHeaderValue(anyString())).thenReturn(null);

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);

        try (MockedStatic<OAuthClient> mockedOAuth = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mockedOAuth.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Force exception from execute -> ResponseHandler
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<String> handler = invocation.getArgument(1);
                        throw new RuntimeException("CIF API error");
                    });

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
        }
    }

    @Test
    void testGetIINumber_UpperEnv_Normal() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);
        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(false);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(true);

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);

        try (MockedStatic<OAuthClient> mockedOAuth = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mockedOAuth.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Mock execute -> ResponseHandler
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<String> handler = invocation.getArgument(1);
                        HttpResponse mockResponse = mock(HttpResponse.class);
                        HttpEntity mockEntity = mock(HttpEntity.class);
                        StatusLine mockStatusLine = mock(StatusLine.class);
                        when(mockResponse.getStatusLine()).thenReturn(mockStatusLine);
                        when(mockStatusLine.getStatusCode()).thenReturn(200);
                        when(mockResponse.getEntity()).thenReturn(mockEntity);

                        try (MockedStatic<org.apache.http.util.EntityUtils> entityUtilsMock = mockStatic(org.apache.http.util.EntityUtils.class)) {
                            String json = "{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"456\"}]}";
                            entityUtilsMock.when(() -> org.apache.http.util.EntityUtils.toString(any(HttpEntity.class)))
                                    .thenReturn(json);
                            return handler.handleResponse(mockResponse);
                        }
                    });

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "67890", "jwt");
            assertEquals("456", iiNumber);
        }
    }

    @Test
    void testGetIINumber_UpperEnv_ExceptionPath() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);
        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(false);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(true);

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);

        try (MockedStatic<OAuthClient> mockedOAuth = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            mockedOAuth.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);

            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            // Exception path
            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<String> handler = invocation.getArgument(1);
                        throw new RuntimeException("CIF API failure");
                    });

            String iiNumber = cifApiClient.getIINumber(reqHeaders, "67890", "jwt");
            assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
        }
    }

    // ===== getAccessToken() Tests =====

    @Test
    void testGetAccessToken_Normal() throws Exception {
        CIFApiClient spyClient = spy(cifApiClient);
        doReturn("token123").when(spyClient).getAccessToken();
        assertEquals("token123", spyClient.getAccessToken());
    }

    @Test
    void testGetAccessToken_Exception() throws Exception {
        OAuthRequestBuilder builderMock = mock(OAuthRequestBuilder.class);
        when(builderMock.withClientCredentialsRequest()).thenReturn(builderMock);
        when(builderMock.endClientCredentialsRequest()).thenReturn(builderMock);
        when(builderMock.build()).thenThrow(new ApiConfigException("config error"));

        try (MockedStatic<OAuthRequestBuilder> builderStatic = mockStatic(OAuthRequestBuilder.class)) {
            builderStatic.when(OAuthRequestBuilder::new).thenReturn(builderMock);

            ApiException exception = assertThrows(ApiException.class, cifApiClient::getAccessToken);
            assertNotNull(exception);
        }
    }
}