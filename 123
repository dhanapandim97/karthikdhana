import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class RegisterServiceTest {

    @Mock
    private GeneratorService generatorService;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private PartyAPIExecutor apiExecutor;

    @Mock
    private RegisterExceptionBuilder registerExceptionBuilder;

    @InjectMocks
    private RegisterService registerService;

    private RegisterIPIBusinessAggregationRequest request;
    private DecryptResponse decryptResponse;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        // prepare input request
        request = TestDataFactory.buildRegisterRequest(); // ðŸ‘‰ helper to create valid request

        // prepare decrypt response
        decryptResponse = new DecryptResponse("altPartyId123", "partyId123");
    }

    @Test
    void testRegisterIPISuccess() throws Exception {
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);

        String responseJson = "{\"registeredIPI\":\"altPartyId123\"}";
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(responseJson);

        when(objectMapper.readValue(eq(responseJson), eq(AddPartyAlternatePartyKeyResponse.class)))
                .thenReturn(new AddPartyAlternatePartyKeyResponse());

        RegisterIPIBusinessAggregationResponsePayload result =
                registerService.registerIPIBusinessAggregation(request, "corr-123");

        assertNotNull(result);
        assertEquals("altPartyId123", result.getRegisteredIPI());
    }

    @Test
    void testDecryptFailsThrowsGeneratorException() {
        when(generatorService.decryptIPIGeneratorOperation(any()))
                .thenReturn(new DecryptResponse(null, null));

        assertThrows(GeneratorException.class, () ->
                registerService.registerIPIBusinessAggregation(request, "corr-123")
        );
    }

    @Test
    void testNullResponseThrowsRegisterException() throws Exception {
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);

        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(null);

        assertThrows(RegisterException.class, () ->
                registerService.registerIPIBusinessAggregation(request, "corr-123")
        );
    }

    @Test
    void testWarningResponseThrowsRegisterException() throws Exception {
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);

        String warningJson = "{\"status\":\"WARN001\"}";
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(warningJson);

        when(apiExecutor.isStatusResponse(eq(warningJson))).thenReturn(true);

        Warning warning = new Warning("WARN001");
        when(objectMapper.readValue(eq(warningJson), eq(Warning.class))).thenReturn(warning);

        when(registerExceptionBuilder.createRegisterException("WARN001"))
                .thenReturn(new RegisterException("Warning received"));

        assertThrows(RegisterException.class, () ->
                registerService.registerIPIBusinessAggregation(request, "corr-123")
        );
    }

    @Test
    void testNon201ResponseThrowsRuntimeException() throws Exception {
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);

        String errorJson = "{\"error\":\"Bad Request\"}";
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(errorJson);

        when(apiExecutor.isStatusResponse(errorJson)).thenReturn(false);

        assertThrows(RuntimeException.class, () ->
                registerService.registerIPIBusinessAggregation(request, "corr-123")
        );
    }
}