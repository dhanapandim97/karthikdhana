import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.core.env.Environment;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class CIFApiClientTest {

    private CIFApiClient cifApiClient;
    private QuoteRequestHeaders reqHeaders;

    @BeforeEach
    void setUp() {
        cifApiClient = new CIFApiClient();
        cifApiClient.cifUrl = "http://dummy.url/@@CIF NUMBER@@";
        cifApiClient.CIF_ENV_ID_KEY = "ENV_ID";
        cifApiClient.CIF_ENG_SYS_KEY = "ENV_SYS";
        reqHeaders = mock(QuoteRequestHeaders.class);
    }

    /** Helper to create mock HttpResponse */
    private HttpResponse createMockResponse(String json) throws Exception {
        HttpResponse response = mock(HttpResponse.class);
        HttpEntity entity = mock(HttpEntity.class);
        StatusLine statusLine = mock(StatusLine.class);

        when(response.getStatusLine()).thenReturn(statusLine);
        when(statusLine.getStatusCode()).thenReturn(200);
        when(response.getEntity()).thenReturn(entity);

        try (MockedStatic<org.apache.http.util.EntityUtils> entityUtilsMock = mockStatic(org.apache.http.util.EntityUtils.class)) {
            entityUtilsMock.when(() -> org.apache.http.util.EntityUtils.toString(entity)).thenReturn(json);
        }

        return response;
    }

    /** ----------------- getIINumber() tests ----------------- */
    @Test
    void testGetIINumber_LowerEnv_Normal() throws Exception {
        // Mock environment
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);
        when(mockEnv.acceptsProfiles("lower-env")).thenReturn(true);
        when(mockEnv.acceptsProfiles("upper-env")).thenReturn(false);
        when(reqHeaders.getHeaderValue(anyString())).thenReturn(null);

        // Spy the client
        CIFApiClient spyClient = spy(cifApiClient);

        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);

        // Mock OAuthClient
        try (MockedStatic<OAuthClient> oauthClientMock = mockStatic(OAuthClient.class);
             MockedStatic<org.apache.http.util.EntityUtils> entityUtilsMock = mockStatic(org.apache.http.util.EntityUtils.class)) {

            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            oauthClientMock.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);
            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            HttpResponse mockResponse = mock(HttpResponse.class);
            HttpEntity mockEntity = mock(HttpEntity.class);
            StatusLine mockStatus = mock(StatusLine.class);

            when(mockResponse.getStatusLine()).thenReturn(mockStatus);
            when(mockStatus.getStatusCode()).thenReturn(200);
            when(mockResponse.getEntity()).thenReturn(mockEntity);

            entityUtilsMock.when(() -> org.apache.http.util.EntityUtils.toString(mockEntity))
                    .thenReturn("{\"partyToAlternatePartyKey\":[{\"alternateKey\":\"123\"}]}");

            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenAnswer(invocation -> {
                        ResponseHandler<?> handler = invocation.getArgument(1);
                        return handler.handleResponse(mockResponse);
                    });

            String iiNumber = spyClient.getIINumber(reqHeaders, "12345", "jwt");
            assertEquals("123", iiNumber);
        }
    }

    @Test
    void testGetIINumber_ExceptionPath() throws Exception {
        Environment mockEnv = mock(Environment.class);
        ReflectionTestUtils.setField(cifApiClient, "environment", mockEnv);

        CIFApiClient spyClient = spy(cifApiClient);
        CloseableHttpClient mockHttpClient = mock(CloseableHttpClient.class);

        try (MockedStatic<OAuthClient> oauthClientMock = mockStatic(OAuthClient.class)) {
            OAuthClient mockOAuthClient = mock(OAuthClient.class);
            oauthClientMock.when(OAuthClient::getInstance).thenReturn(mockOAuthClient);
            when(mockOAuthClient.getSyncClient()).thenReturn(mockHttpClient);
            doNothing().when(mockOAuthClient).addOAuthTokenWithSecondaryToken(any(HttpGet.class), anyString());

            when(mockHttpClient.execute(any(HttpGet.class), any(ResponseHandler.class)))
                    .thenThrow(new RuntimeException("CIF API error"));

            String iiNumber = spyClient.getIINumber(reqHeaders, "99999", "jwt");
            assertEquals(Constants.DEFAULT_II_NUMBER, iiNumber);
        }
    }

    /** ----------------- getAccessToken() tests ----------------- */
    @Test
    void testGetAccessToken_Normal() throws Exception {
        CIFApiClient spyClient = spy(cifApiClient);

        try (MockedStatic<OAuthRequestBuilder> builderStatic = mockStatic(OAuthRequestBuilder.class);
             MockedStatic<OAuthSDRService> sdrStatic = mockStatic(OAuthSDRService.class)) {

            OAuthRequestBuilder mockBuilder = mock(OAuthRequestBuilder.class);
            OAuthRequestBuilder.ClientCredentialsStep mockStep = mock(OAuthRequestBuilder.ClientCredentialsStep.class);
            OAuthRequest mockRequest = mock(OAuthRequest.class);
            OAuthResponse mockResponse = mock(OAuthResponse.class);

            builderStatic.when(OAuthRequestBuilder::new).thenReturn(mockBuilder);
            when(mockBuilder.withClientCredentialsRequest()).thenReturn(mockStep);
            when(mockStep.endClientCredentialsRequest()).thenReturn(mockStep);
            when(mockStep.build()).thenReturn(mockRequest);

            OAuthSDRService mockService = mock(OAuthSDRService.class);
            sdrStatic.when(OAuthSDRService::new).thenReturn(mockService);
            when(mockService.getToken(mockRequest)).thenReturn(mockResponse);

            when(mockResponse.getAccessToken()).thenReturn("dummyToken");

            String token = spyClient.getAccessToken();
            assertEquals("dummyToken", token);
        }
    }

    @Test
    void testGetAccessToken_Exception() throws Exception {
        CIFApiClient spyClient = spy(cifApiClient);

        try (MockedStatic<OAuthRequestBuilder> builderStatic = mockStatic(OAuthRequestBuilder.class)) {
            OAuthRequestBuilder mockBuilder = mock(OAuthRequestBuilder.class);
            OAuthRequestBuilder.ClientCredentialsStep mockStep = mock(OAuthRequestBuilder.ClientCredentialsStep.class);

            builderStatic.when(OAuthRequestBuilder::new).thenReturn(mockBuilder);
            when(mockBuilder.withClientCredentialsRequest()).thenReturn(mockStep);
            when(mockStep.endClientCredentialsRequest()).thenReturn(mockStep);
            when(mockStep.build()).thenThrow(new ApiConfigException("config error"));

            assertThrows(ApiException.class, () -> spyClient.getAccessToken());
        }
    }
}