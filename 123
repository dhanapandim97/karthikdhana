@ExtendWith(MockitoExtension.class)
class RegisterServiceTest {

    @Mock private GeneratorService generatorService;
    @Mock private ObjectMapper objectMapper;
    @Mock private PartyAPIExecutor apiExecutor;
    @Mock private RegisterExceptionBuilder registerExceptionBuilder;

    @InjectMocks
    private RegisterService registerService;

    @Test
    void testRegisterIPIBusinessAggregation_success() throws Exception {
        // Arrange
        DecryptResponse decryptResponse = new DecryptResponse("decryptedVal", "seedVal");
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);

        // Act
        var response = registerService.registerIPIBusinessAggregation(
            mockRequest(), "corrId");

        // Assert
        assertEquals("decryptedVal", response.getRegisteredIPI());
    }

    @Test
    void testRegisterIPIBusinessAggregation_missingValues_throwsException() throws Exception {
        DecryptResponse decryptResponse = new DecryptResponse(null, "seedVal");
        when(generatorService.decryptIPIGeneratorOperation(any())).thenReturn(decryptResponse);

        assertThrows(GeneratorException.class,
            () -> registerService.registerIPIBusinessAggregation(mockRequest(), "corrId"));
    }

    @Test
    void testCreateAlternatePartyId_success201() throws Exception {
        HttpResponse response = mock(HttpResponse.class);
        when(response.getStatusLine().getStatusCode()).thenReturn(201);
        when(response.getEntity()).thenReturn(new StringEntity("{\"key\":\"value\"}"));
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(response);
        when(objectMapper.readValue(anyString(), eq(AddPartyAlternatePartyKeyResponse.class)))
            .thenReturn(new AddPartyAlternatePartyKeyResponse());

        var result = registerService.createAlternatePartyID("p1", "a1", "c1");

        assertNotNull(result);
    }

    @Test
    void testCreateAlternatePartyId_nullResponse_throwsException() throws Exception {
        HttpResponse response = mock(HttpResponse.class);
        when(response.getStatusLine().getStatusCode()).thenReturn(500);
        when(response.getEntity()).thenReturn(null);
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(response);

        assertThrows(RegisterException.class,
            () -> registerService.createAlternatePartyID("p1", "a1", "c1"));
    }

    @Test
    void testCreateAlternatePartyId_warningResponse() throws Exception {
        HttpResponse response = mock(HttpResponse.class);
        when(response.getStatusLine().getStatusCode()).thenReturn(400);
        when(response.getEntity()).thenReturn(new StringEntity("{warn}"));
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(response);

        when(apiExecutor.isStatusResponse(anyString())).thenReturn(true);
        when(objectMapper.readValue(anyString(), eq(Warning.class))).thenReturn(new Warning());
        when(registerExceptionBuilder.createRegisterException(any())).thenReturn(new RegisterException("error"));

        assertThrows(RegisterException.class,
            () -> registerService.createAlternatePartyID("p1", "a1", "c1"));
    }

    @Test
    void testCreateAlternatePartyId_non201Error_throwsRuntime() throws Exception {
        HttpResponse response = mock(HttpResponse.class);
        when(response.getStatusLine().getStatusCode()).thenReturn(500);
        when(response.getEntity()).thenReturn(new StringEntity("error"));
        when(apiExecutor.makePOSTRequest(anyString(), anyString(), any())).thenReturn(response);

        assertThrows(RuntimeException.class,
            () -> registerService.createAlternatePartyID("p1", "a1", "c1"));
    }

    @Test
    void testJsonProcessingException() throws Exception {
        when(objectMapper.writeValueAsString(any())).thenThrow(new JsonProcessingException("fail"){});

        assertThrows(JsonProcessingException.class,
            () -> registerService.createAlternatePartyID("p1", "a1", "c1"));
    }

    // helper
    private RegisterIPIBusinessAggregationRequest mockRequest() {
        // build minimal mock request object for test
        return new RegisterIPIBusinessAggregationRequest();
    }
}