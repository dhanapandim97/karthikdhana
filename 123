import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

class PartyLookupServiceTest {

    @Mock
    private PartyLookupExceptionBuilder exceptionBuilder;

    @Mock
    private PartyAPIExecutor apiExecutor;

    @Mock
    private GeneratorService generatorService;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private PartyLookupService service;

    private String customerServiceUrl = "http://customerService/";
    private String alternatePartyServiceUrl = "http://alternateService/";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        service = new PartyLookupService(
                customerServiceUrl,
                alternatePartyServiceUrl,
                exceptionBuilder,
                apiExecutor,
                generatorService,
                objectMapper
        );
    }

    // --------------------- Normal Flow ---------------------
    @Test
    void testSearchPartyLookupBusinessAggregationOperation_normalFlow() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = createRequest(2);

        RetrieveBusinessListResponse customerResp = createCustomerResponse();

        // Customer API
        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        // Alternate party IDs
        for (Business b : customerResp.getBusiness()) {
            String altResp = "{\"partyToAlternateParty\":[{\"alternateKey\":\"alt_" + b.getKey() + "\"}]}";
            when(apiExecutor.makeGETRequest(contains(b.getKey()), any())).thenReturn(altResp);
            RetrieveAlternatePartyKeyResponse altRespObj = new RetrieveAlternatePartyKeyResponse();
            altRespObj.setPartyToAlternateParty(List.of(new PartyKeyMapping("alt_" + b.getKey())));
            when(objectMapper.readValue(altResp, RetrieveAlternatePartyKeyResponse.class)).thenReturn(altRespObj);
        }

        // No encryption needed
        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(new EncryptResponse(Collections.emptyList()));

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertEquals(2, response.getParty().size());
        assertEquals("alt_key1", response.getParty().get(0).getAlternatePartyId());
    }

    // --------------------- Alternate ID Null â†’ Encryption ---------------------
    @Test
    void testSearchPartyLookupBusinessAggregationOperation_encryption() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = createRequest(1);
        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        Business b1 = new Business("key1", "FullName1", "Alias1", createStreetAddress("US"));
        customerResp.setBusiness(List.of(b1));

        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        // Alternate party returns null
        when(apiExecutor.makeGETRequest(contains("key1"), any())).thenReturn(null);

        // Encryption response
        EncryptResponseType encRespType = new EncryptResponseType("key1", "enc_key1");
        EncryptResponse encResp = new EncryptResponse(List.of(encRespType));
        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(encResp);

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertEquals("enc_key1", response.getParty().get(0).getAlternatePartyId());
    }

    // --------------------- API Failure ---------------------
    @Test
    void testCustomerApiFailure_throwsRuntimeException() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = createRequest(1);

        // API returns error
        when(apiExecutor.makeGETRequest(anyString(), any())).thenAnswer(inv -> { throw new RuntimeException("API Fail"); });

        assertThrows(RuntimeException.class, () -> service.searchPartyLookupBusinessAggregationOperation(request));
    }

    // --------------------- JSON Processing Exception ---------------------
    @Test
    void testAlternatePartyJsonProcessingException() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = createRequest(1);
        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        Business b1 = new Business("key1", "FullName1", "Alias1", createStreetAddress("US"));
        customerResp.setBusiness(List.of(b1));

        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        // Alternate party returns invalid JSON
        when(apiExecutor.makeGETRequest(contains("key1"), any())).thenReturn("INVALID_JSON");
        when(objectMapper.readValue("INVALID_JSON", RetrieveAlternatePartyKeyResponse.class))
                .thenThrow(JsonProcessingException.class);

        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(new EncryptResponse(Collections.emptyList()));

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertNull(response.getParty().get(0).getAlternatePartyId());
    }

    // --------------------- Different Country Codes ---------------------
    @Test
    void testBuildCustomerAddressVO_differentCountries() throws Exception {
        SearchPartyLookupBusinessAggregationRequestPayload request = createRequest(3);

        RetrieveBusinessListResponse customerResp = new RetrieveBusinessListResponse();
        customerResp.setBusiness(List.of(
                new Business("key1", "FullName1", "Alias1", createStreetAddress("US")),
                new Business("key2", "FullName2", "Alias2", createStreetAddress("CA")),
                new Business("key3", "FullName3", "Alias3", createStreetAddress("IN"))
        ));

        when(apiExecutor.makeGETRequest(anyString(), any())).thenReturn("{}");
        when(objectMapper.readValue("{}", RetrieveBusinessListResponse.class)).thenReturn(customerResp);

        for (Business b : customerResp.getBusiness()) {
            String altResp = "{\"partyToAlternateParty\":[{\"alternateKey\":\"alt_" + b.getKey() + "\"}]}";
            when(apiExecutor.makeGETRequest(contains(b.getKey()), any())).thenReturn(altResp);
            RetrieveAlternatePartyKeyResponse altRespObj = new RetrieveAlternatePartyKeyResponse();
            altRespObj.setPartyToAlternateParty(List.of(new PartyKeyMapping("alt_" + b.getKey())));
            when(objectMapper.readValue(altResp, RetrieveAlternatePartyKeyResponse.class)).thenReturn(altRespObj);
        }

        when(generatorService.invokeIPIGeneratorEncrypt(any())).thenReturn(new EncryptResponse(Collections.emptyList()));

        var response = service.searchPartyLookupBusinessAggregationOperation(request);
        assertEquals(3, response.getParty().size());
    }

    // --------------------- Helpers ---------------------
    private SearchPartyLookupBusinessAggregationRequestPayload createRequest(int maxListSize) {
        SearchPartyLookupBusinessAggregationRequestPayload request = new SearchPartyLookupBusinessAggregationRequestPayload();
        request.setMaxListSize(maxListSize);
        OrganizationCriteria orgCriteria = new OrganizationCriteria();
        orgCriteria.setName("TestName");
        request.setSearchCriteria(new SearchCriteria(orgCriteria));
        return request;
    }

    private StreetAddress createStreetAddress(String countryCd) {
        StreetAddress addr = new StreetAddress();
        addr.setCountryCd(countryCd);
        addr.setTerritory("SomeState");
        addr.setPostalCode("12345");
        addr.setAddressLine1("Line1");
        addr.setAddressLine2("Line2");
        addr.setAddressLine3("Line3");
        addr.setCity("City");
        return addr;
    }
}