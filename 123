import com.td.tdi.api.ipirg.model.response.soap.lookup.SoapEnvelope;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.context.MessageSource;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;

import jakarta.servlet.http.HttpServletRequest;

import java.util.List;
import java.util.Locale;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ValidationExceptionHandlerTest {

    private ValidationExceptionHandler handler; // <-- your exception handler class
    private MessageSource messageSource;

    @BeforeEach
    void setUp() {
        messageSource = mock(MessageSource.class);
        handler = new ValidationExceptionHandler(messageSource);
    }

    @Test
    void testHandleValidationError_lookupUri() {
        // Mock request
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getRequestURI()).thenReturn("/lookup");

        // Mock binding result with 1 error
        BindingResult bindingResult = new BindException(new Object(), "test");
        bindingResult.addError(new ObjectError("field", "VALID_CODE_123"));

        MethodArgumentNotValidException ex = 
            new MethodArgumentNotValidException(null, bindingResult);

        // Mock message source
        when(messageSource.getMessage(eq("VALID_CODE_123"), any(), eq(Locale.getDefault())))
            .thenReturn("Some validation message");

        // Call the handler
        ResponseEntity<SoapEnvelope> response = 
            handler.handleValidationError(ex, request);

        // Assertions
        assertEquals(500, response.getStatusCodeValue());
        assertEquals("application/xml", response.getHeaders().getContentType().toString());

        SoapEnvelope body = response.getBody();
        assertNotNull(body);

        // depending on your SOAP model
        assertTrue(body.toString().contains("VALID_CODE_123")); 
        assertTrue(body.toString().contains("Some validation message"));
    }

    @Test
    void testHandleValidationError_generatorUri() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getRequestURI()).thenReturn("/generator");

        BindingResult bindingResult = new BindException(new Object(), "test");
        bindingResult.addError(new ObjectError("field", "GEN_CODE"));

        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null, bindingResult);

        when(messageSource.getMessage(eq("GEN_CODE"), any(), eq(Locale.getDefault())))
            .thenReturn("Generator error");

        ResponseEntity<SoapEnvelope> response = handler.handleValidationError(ex, request);

        assertEquals(500, response.getStatusCodeValue());
        assertEquals("application/xml", response.getHeaders().getContentType().toString());
        assertNotNull(response.getBody());
    }

    @Test
    void testHandleValidationError_unexpectedUri() {
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getRequestURI()).thenReturn("/unknown");

        BindingResult bindingResult = new BindException(new Object(), "test");
        bindingResult.addError(new ObjectError("field", "BAD_CODE"));

        MethodArgumentNotValidException ex = new MethodArgumentNotValidException(null, bindingResult);

        assertThrows(IllegalArgumentException.class,
            () -> handler.handleValidationError(ex, request));
    }
}
