import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer;

import java.io.IOException;

public class StarIgnoringBeanDeserializer extends DelegatingDeserializer {

    private final JavaType type;

    protected StarIgnoringBeanDeserializer(JsonDeserializer<?> delegate, JavaType type) {
        super(delegate);
        this.type = type;
    }

    @Override
    protected JsonDeserializer<?> newDelegatingInstance(JsonDeserializer<?> newDelegate) {
        return new StarIgnoringBeanDeserializer(newDelegate, type);
    }

    @Override
    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        // If we only get a plain "*" instead of an object
        if (p.currentToken() == JsonToken.VALUE_STRING) {
            String text = p.getText();
            if ("*".equals(text)) {
                try {
                    // Return an empty instance of the target bean
                    return type.getRawClass().getDeclaredConstructor().newInstance();
                } catch (Exception e) {
                    throw new IOException("Cannot create empty instance of " + type, e);
                }
            }
        }
        // Fallback â†’ delegate to default deserializer
        return super.deserialize(p, ctxt);
    }
}



import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.module.SimpleModule;

public class StarIgnoringModule extends SimpleModule {
    @Override
    public void setupModule(SetupContext context) {
        super.setupModule(context);
        context.addBeanDeserializerModifier(new BeanDeserializerModifier() {
            @Override
            public JsonDeserializer<?> modifyDeserializer(
                    DeserializationConfig config,
                    BeanDescription beanDesc,
                    JsonDeserializer<?> deserializer) {
                return new StarIgnoringBeanDeserializer(deserializer, beanDesc.getType());
            }
        });
    }
}




import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;

@Configuration
public class XmlConfig {

    @Bean
    public MappingJackson2XmlHttpMessageConverter xmlConverter() {
        XmlMapper xmlMapper = new XmlMapper();
        xmlMapper.registerModule(new StarIgnoringModule());
        return new MappingJackson2XmlHttpMessageConverter(xmlMapper);
    }
}